<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>bwapp通关之A1-Injection</title>
    <link href="/2022/08/01/bwapp%E9%80%9A%E5%85%B3%E4%B9%8BA1-Injection/"/>
    <url>/2022/08/01/bwapp%E9%80%9A%E5%85%B3%E4%B9%8BA1-Injection/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML-Injection-Reflected-GET"><a href="#HTML-Injection-Reflected-GET" class="headerlink" title="HTML Injection - Reflected(GET)"></a>HTML Injection - Reflected(GET)</h1><h2 id="low-级别"><a href="#low-级别" class="headerlink" title="low 级别"></a>low 级别</h2><p>low级别意味着没有任何检查<br>输入<code>&lt;h1&gt;This is a test&lt;/h1&gt;</code>，可以看到可以被完整解析到页面上<br><img src="https://i.imgur.com/A9iGfgJ.png" alt="图片" title="&lt;h1&gt;This is a test&lt;/h1&gt;"></p><p>输入<code>&lt;meta http-equiv=&quot;refresh&quot; content=&#39;0; url=https://xxx:xxx/portal.php</code><br><img src="https://i.imgur.com/Ao8E5ic.png" alt="图片" title="meta标签注入"></p><h2 id="medium-级别"><a href="#medium-级别" class="headerlink" title="medium 级别"></a>medium 级别</h2><p>进行和low级别相同操作<br><img src="https://i.imgur.com/VbjtMEA.png" alt="图片"></p><p>发现无法注入成功<br>抓包可见cookie值有变化</p><p><img src="https://i.imgur.com/quGGiYz.png" alt="图片"></p><p><img src="https://i.imgur.com/FRKq9XX.png" alt="图片"></p><p>查看源码app&#x2F;htmli_get.php</p><p><img src="https://i.imgur.com/E4MkkpO.png" alt="图片"></p><p>进一步找到xss_check_1,在app&#x2F;functions_external.php中<br><img src="https://i.imgur.com/vtSeVJo.png" alt="图片"></p><p>可以看出medium级别的检查是先将输入的&lt;&gt;转为html字符实体&amp;lt和&amp;gt<br>然后对输入解码<br>这里可以看到bwapp提供了三个例子</p><p><code>&lt;script&gt;alert(0)&lt;/script&gt;</code><br><code>%3Cscript%3Ealert%280%29%3C%2Fscript%3E</code> &#x2F;&#x2F;这是对<code>&lt;script&gt;alert(0)&lt;/script&gt;</code>的一次编码<br><code>%253Cscript%253Ealert%25280%2529%253C%252Fscript%253E</code> &#x2F;&#x2F;这是对<code>&lt;script&gt;alert(0)&lt;/script&gt;</code>的二次编码</p><p>不难得出解决办法是输入编码后的代码<br>这里就不放图了</p><h2 id="high-级别"><a href="#high-级别" class="headerlink" title="high 级别"></a>high 级别</h2><p>运行和medium相同操作,也是无法注入成功,查看代码<br>发现是带有ENT_QUOTES参数的htmlspecialchars()函数,<br>暂时没想到办法<br><img src="https://i.imgur.com/9QZnrY9.png" alt="图片"></p><h1 id="HTML-Injection-Reflected-POST"><a href="#HTML-Injection-Reflected-POST" class="headerlink" title="HTML Injection - Reflected(POST)"></a>HTML Injection - Reflected(POST)</h1><p>同GET方式</p><h1 id="HTML-Injection-Reflected-URL"><a href="#HTML-Injection-Reflected-URL" class="headerlink" title="HTML Injection - Reflected (URL)"></a>HTML Injection - Reflected (URL)</h1><h2 id="low-级别-1"><a href="#low-级别-1" class="headerlink" title="low 级别"></a>low 级别</h2><p>抓包如图示,将编码部分更改即可<br><img src="https://i.imgur.com/cxNSH0x.png" alt="图片"><br><img src="https://i.imgur.com/v8SJIPz.png" alt="图片"></p><p>根据源码<br><img src="https://i.imgur.com/fPFU8hI.png" alt="图片"></p><p>也可以更改host<br><img src="https://i.imgur.com/QysdV76.png" alt="图片"></p><h2 id="medium-级别-1"><a href="#medium-级别-1" class="headerlink" title="medium 级别"></a>medium 级别</h2><p>该问题似乎是在 Javascript 中运行的 DOM XSS 中的一个漏洞.<br>它已在最近的浏览器中得到处理。现在的浏览器可以对URL中的&lt;&gt;字符进行编码,从而导致攻击失败.<br>可以在老版本的IE中实现进攻.</p><h2 id="high-级别-1"><a href="#high-级别-1" class="headerlink" title="high 级别"></a>high 级别</h2><p>可以从源码看到再次使用了带有ENT_QUOTES参数的htmlspecialchars()函数,不可绕过.</p><h1 id="HTML-Injection-Stored-Blog"><a href="#HTML-Injection-Stored-Blog" class="headerlink" title="HTML Injection - Stored (Blog)"></a>HTML Injection - Stored (Blog)</h1><h2 id="low-级别-2"><a href="#low-级别-2" class="headerlink" title="low 级别"></a>low 级别</h2><p>直接尝试注入，可行<br><img src="https://i.imgur.com/RBcI4bt.png" alt="图片"></p><h2 id="medium-amp-high-级别"><a href="#medium-amp-high-级别" class="headerlink" title="medium&amp;high 级别"></a>medium&amp;high 级别</h2><p>尝试注入,发现没有被解析<br><img src="https://i.imgur.com/n1WdAd6.png"></p><p>查看源码 app&#x2F;htmli_stored.php</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">htmli</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"connect_i.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"security_level"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string double-quoted-string">"0"</span> <span class="token punctuation">:</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">sqli_check_3</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string double-quoted-string">"1"</span> <span class="token punctuation">:</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">sqli_check_3</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// $data = xss_check_4($data);</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string double-quoted-string">"2"</span> <span class="token punctuation">:</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">sqli_check_3</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// $data = xss_check_3($data);</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span> <span class="token punctuation">:</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">sqli_check_3</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://i.imgur.com/65DZ2S5.png"></p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// app/functions_external.php</span><span class="token keyword">function</span> <span class="token function-definition function">xss_check_3</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$encoding</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// htmlspecialchars - converts special characters to HTML entities    </span>    <span class="token comment">// '&amp;' (ampersand) becomes '&amp;amp;' </span>    <span class="token comment">// '"' (double quote) becomes '&amp;quot;' when ENT_NOQUOTES is not set</span>    <span class="token comment">// "'" (single quote) becomes '&amp;#039;' (or &amp;apos;) only when ENT_QUOTES is set</span>    <span class="token comment">// '&lt;' (less than) becomes '&amp;lt;'</span>    <span class="token comment">// '>' (greater than) becomes '&amp;gt;'  </span>        <span class="token keyword">return</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token constant">ENT_QUOTES</span><span class="token punctuation">,</span> <span class="token variable">$encoding</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>发现最终拦路关卡是 htmlspecialchars(),认输.</p><h1 id="iFrame-Injection"><a href="#iFrame-Injection" class="headerlink" title="iFrame Injection"></a>iFrame Injection</h1><blockquote><p>iframe是可用于在HTML页面中嵌入一些文件(如文档，视频等)的一项技术。对iframe最简单的解释就是“iframe是一个可以在当前页面中显示其它页面内容的技术”<br>通过利用iframe标签对网站页面进行注入，是利用了HTML标签，实际上就是一个阅读器，可以阅读通过协议加载的活服务器本地的文件、视频等</p></blockquote><h2 id="low-级别-3"><a href="#low-级别-3" class="headerlink" title="low 级别"></a>low 级别</h2><p><img src="https://i.imgur.com/o4Ucg47.png"></p><p>尝试修改参数,成功<br><img src="https://i.imgur.com/1oR7NZB.png"></p><h2 id="medium-级别-2"><a href="#medium-级别-2" class="headerlink" title="medium 级别"></a>medium 级别</h2><p>尝试low级别相同操作,果然不行<br>查看代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">function xss($data)&#123;    switch($_COOKIE["security_level"])    &#123;        case "0" :            $data = no_check($data);            break;        case "1" :            $data = xss_check_4($data);            break;        case "2" :            $data = xss_check_3($data);            break;        default :            $data = no_check($data);            break;    &#125;    return $data;&#125;if($_COOKIE["security_level"] == "1" || $_COOKIE["security_level"] == "2")&#123;?>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robots.txt<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">xss</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ParamHeight"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">xss</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ParamWidth"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token delimiter important">?></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">xss</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ParamUrl"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">xss</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ParamHeight"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">xss</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ParamWidth"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">xss_check_4</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// addslashes - returns a string with backslashes before characters that need to be quoted in database queries etc.</span>    <span class="token comment">// These characters are single quote ('), double quote ("), backslash (\) and NUL (the NULL byte).</span>    <span class="token comment">// Do NOT use this for XSS or HTML validations!!!</span>        <span class="token keyword">return</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到检测手法是addslashes()函数,而在iframe标签里,最后面的元素是ParamWidth,所以可以在宽度后附上payload,如图:<br><img src="https://i.imgur.com/IVX5T18.png"></p><h2 id="high-级别-2"><a href="#high-级别-2" class="headerlink" title="high 级别"></a>high 级别</h2><p>老样子, htmlspecialchars()函数</p><h1 id="LDAP-Connection-Settings"><a href="#LDAP-Connection-Settings" class="headerlink" title="LDAP Connection Settings"></a>LDAP Connection Settings</h1><blockquote><p>LDAP Lightweight Directory Access Protocol 轻量级目录访问协议</p></blockquote><p>因为要安装环境，暂时略过</p><h1 id="Mail-Header-Injection-SMTP"><a href="#Mail-Header-Injection-SMTP" class="headerlink" title="Mail Header Injection (SMTP)"></a>Mail Header Injection (SMTP)</h1><blockquote><p>注入原理:<br>邮件的结构,分为信封(MAIL FROM,RCPT TO),头部(From,To,Subject,CC,BCC等),主体(message),mail header injection,即针对头部的注入.使用telnet对25端口进行手工发邮件的过程的事后会发现，对于邮件头部的字段其实就是换行符0x0A或者0x0D0x0A分割,即\n或\r\n,所以就可以注入了.</p></blockquote><p>由于bwapp邮件服务没设置好,这里也不演示了</p><h1 id="OS-Command-Injection"><a href="#OS-Command-Injection" class="headerlink" title="OS Command Injection"></a>OS Command Injection</h1><h2 id="low-级别-4"><a href="#low-级别-4" class="headerlink" title="low 级别"></a>low 级别</h2><p>思路就是输入不止一条命令<br>可以用 <strong>;</strong>,可以用  <strong>&amp;</strong>,也可以用 <strong>|</strong><br><img src="https://i.imgur.com/0vmDfGf.png">  </p><p>另外,如果没有回显,可能是你的环境不支持nslookup命令</p><h2 id="medium-级别-3"><a href="#medium-级别-3" class="headerlink" title="medium 级别"></a>medium 级别</h2><p>同 low 级别思路,发现只有 <strong>|</strong> 可以用.<br>查看代码<br><img src="https://i.imgur.com/IbGQsMs.png"><br><img src="https://i.imgur.com/NuAvnhU.png"></p><p>可以看到 <code>commandi_check_1()</code> 把 <code>&amp;</code> 和 <code>;</code>替换了.</p><h2 id="high-级别-3"><a href="#high-级别-3" class="headerlink" title="high 级别"></a>high 级别</h2><p><code>escapeshellcmd()</code>确保用户只执行一个命令<br>暂时无法注入</p><h1 id="OS-Command-lnjection-Blind"><a href="#OS-Command-lnjection-Blind" class="headerlink" title="OS Command lnjection - Blind"></a>OS Command lnjection - Blind</h1><h2 id="low-级别-5"><a href="#low-级别-5" class="headerlink" title="low 级别"></a>low 级别</h2><p>没有回显,通过时间盲注<br><img src="https://i.imgur.com/TSZ4FI2.png"></p><h2 id="medium-级别-4"><a href="#medium-级别-4" class="headerlink" title="medium 级别"></a>medium 级别</h2><p>同理，使用管道符即可</p><h1 id="PHP-Code-Injection"><a href="#PHP-Code-Injection" class="headerlink" title="PHP Code Injection"></a>PHP Code Injection</h1><h2 id="low-级别-6"><a href="#low-级别-6" class="headerlink" title="low 级别"></a>low 级别</h2><p>观察发现请求页面的message参数，尝试使用php函数作为参数<br><img src="https://i.imgur.com/rHfwhav.png"><br><img src="https://i.imgur.com/K6pvwzh.png"><br>可以获取&#x2F;etc&#x2F;passwd文件的信息<br>猜测是使用了<code>eval</code>函数且未检查参数</p><h2 id="medium-amp-high-级别-1"><a href="#medium-amp-high-级别-1" class="headerlink" title="medium&amp;high 级别"></a>medium&amp;high 级别</h2><p><img src="https://i.imgur.com/3UDDnN3.png"><br>上图可见移除了<code>eval</code>函数,且使用<code>htmlspecialchars </code>来处理参数</p><h1 id="Server-Side-Includes-SSI-Injection"><a href="#Server-Side-Includes-SSI-Injection" class="headerlink" title="Server-Side Includes (SSI) Injection"></a>Server-Side Includes (SSI) Injection</h1><blockquote><p>SSI是用于向HTML页面提供动态内容的Web应用程序上的指令。 它们与CGI类似，不同之处在于SSI用于在加载当前页面之前或在页面可视化时执行某些操作。 为此，Web服务器在将页面提供给用户之前分析SSI。</p></blockquote><p>SSI基本格式<code>&lt;!-– 指令名称=&quot;指令参数&quot;&gt;</code><br>由于环境不支持,就不演示了</p><h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><h2 id="sql-注入分类"><a href="#sql-注入分类" class="headerlink" title="sql 注入分类"></a>sql 注入分类</h2><p><strong>按照注入点类型分类</strong></p><ul><li>数字型注入点</li><li>字符型注入点</li><li>搜索型注入点</li></ul><p><strong>按照http传递数据的方式分类</strong></p><ul><li>get 注入</li><li>post 注入</li><li>cookie 注入</li><li>http请求头注入</li></ul><p><strong>按照执行效果分类</strong></p><ul><li>基于报错的注入</li><li>布尔类型注入</li><li>时间盲注</li></ul><h2 id="sql-注入的常见方法"><a href="#sql-注入的常见方法" class="headerlink" title="sql 注入的常见方法"></a>sql 注入的常见方法</h2><ul><li>特殊字符<ul><li>比如分号(堆叠注入):<figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li>比如注释符:<figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># sleep(500)可对系统资源造成极大耗损</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num <span class="token keyword">from</span> game_score <span class="token keyword">where</span> game_id <span class="token operator">=</span> <span class="token number">244</span> <span class="token operator">and</span> version <span class="token operator">=</span> <span class="token string">'-1'</span> <span class="token operator">or</span> <span class="token number">3</span> <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token comment">-- 注释掉可能对注入造成干扰的语句</span><span class="token comment">/*还有这种注释*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li>比如单引号: <code>1&#39; or &#39;1&#39;=&#39;1</code></li></ul></li><li>针对黑名单过滤<ul><li>sql 语句同义变形体</li><li>双写绕过</li></ul></li><li>针对中间链环节如编码<ul><li>宽字节注入(去掉转义符)</li></ul></li><li>存储型注入,针对后端&#x2F;数据库输入<br>比如:用户名输入<code>admin&#39;#</code></li></ul><h2 id="一般步骤-非盲"><a href="#一般步骤-非盲" class="headerlink" title="一般步骤(非盲)"></a>一般步骤(非盲)</h2><ol><li><p>判断是否存在注入，注入是字符型还是整数型</p></li><li><p>猜解SQL查询语句中的字段数 (order by )</p></li><li><p>确定显示的字段顺序 </p></li><li><p>获取当前数据库 (爆库)</p></li><li><p>获取数据库中的表 (爆表)</p></li><li><p>获取表中的字段名 (爆字段)</p></li><li><p>下载数据 (爆数据)</p></li></ol><h2 id="bwapp-中的-sql-注入"><a href="#bwapp-中的-sql-注入" class="headerlink" title="bwapp 中的 sql 注入"></a>bwapp 中的 sql 注入</h2><h2 id="GET-x2F-Search-amp-amp-GET-x2F-Select"><a href="#GET-x2F-Search-amp-amp-GET-x2F-Select" class="headerlink" title="(GET&#x2F;Search &amp;&amp; GET&#x2F;Select)"></a>(GET&#x2F;Search &amp;&amp; GET&#x2F;Select)</h2><ul><li><strong>low</strong><br>payload: <code>g%&#39; union select 1,database(),3,5,4,6,7 -- </code>  注意有个空格<br><img src="https://i.imgur.com/JBZG0YG.png"><br>或者<code>&#39; and 1=0 union all select 1,table_name, column_name,4,5,6,7 from information_schema.columns where table_schema=&#39;bWAPP&#39;#</code><br><img src="https://i.imgur.com/pdmn4xb.png"></li><li><strong>medium</strong><br>  <img src="https://i.imgur.com/snYzxQx.png"><br>  <img src="https://i.imgur.com/WA2da3P.png"><br>  又是<code>addslashes()</code>函数,此函数的作用是在预定义的字符前加上<code>\</code>进行转义,<br>  预定义字符有<code>&#39;</code>,<code>&quot;</code>,<code>\</code>,NULL<br>  数据库如果是GBK编码可以考虑宽字节注入</li><li><strong>high</strong><br>采用<code>mysql_real_escape_string()</code>函数防御,此函数转义sql语句中的特殊字符,没有想到注入方法</li></ul><h2 id="POST-x2F-Search-amp-POST-x2F-Select"><a href="#POST-x2F-Search-amp-POST-x2F-Select" class="headerlink" title="(POST&#x2F;Search &amp; POST&#x2F;Select)"></a>(POST&#x2F;Search &amp; POST&#x2F;Select)</h2><p>基本和 GET 方式一样,多了一步抓包<br><img src="https://i.imgur.com/LUQGlur.png"></p><h2 id="AJAX-x2F-JSON-x2F-jQuery"><a href="#AJAX-x2F-JSON-x2F-jQuery" class="headerlink" title="(AJAX&#x2F;JSON&#x2F;jQuery)"></a>(AJAX&#x2F;JSON&#x2F;jQuery)</h2><ul><li><strong>low</strong><br>  使用 GET 请求方式输入 url 并不能查询到数据,原因是没有经过页面 JS 的交互,<br>  可以看到禁用了 js 后无论输入什么内容都没有回显<br>  <img src="https://i.imgur.com/k0qFD6V.png"><br>  <img src="https://i.imgur.com/8aF7AQA.png"><br>  <img src="https://i.imgur.com/IJiawfJ.png"><br>  于是查看网页源代码<br>  <img src="https://i.imgur.com/MgUiz8O.png"><br>  可以看到是从<code>sqli_10-2.php</code>获取的 json 数据<br>  同样的,抓包也可以抓到:<br>  <img src="https://i.imgur.com/duTwNvS.png"><br>  于是从<code>sqli_10-2.php</code>注入<br>  <img src="https://i.imgur.com/ShgT94S.png"><br>  接下来和上面一样了</li><li><strong>medium&amp;high</strong><br>同上也是<code>addslashes()</code>与<code>mysql_real_escape_string()</code>防御</li></ul><h2 id="CAPTCHA"><a href="#CAPTCHA" class="headerlink" title="(CAPTCHA)"></a>(CAPTCHA)</h2><p>在注入前需要输入验证码,除此之外和上面没有别的区别</p><h2 id="Login-Form-x2F-Hero"><a href="#Login-Form-x2F-Hero" class="headerlink" title="(Login Form&#x2F;Hero)"></a>(Login Form&#x2F;Hero)</h2><ul><li><p><strong>low</strong><br>先找注入点<br><img src="https://i.imgur.com/SXxK9mR.png"><br>可以 SQL 注入<br>猜测sql语句为</p><figure><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">select <span class="token operator">*</span> from user where username<span class="token operator">=</span><span class="token string single-quoted-string">' $username '</span><span class="token keyword">and</span> password<span class="token operator">=</span><span class="token string single-quoted-string">' $password '</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>于是构造payload为:</p><blockquote><p>用户名: ‘ or 1&#x3D;1#<br>密码: 随义</p></blockquote><p><img src="https://i.imgur.com/xGCy9U8.png"></p></li><li><p><strong>medium&amp;high</strong><br>同上也是<code>addslashes()</code>与<code>mysql_real_escape_string()</code>防御</p></li></ul><h2 id="Login-Form-x2F-User"><a href="#Login-Form-x2F-User" class="headerlink" title="(Login Form&#x2F;User)"></a>(Login Form&#x2F;User)</h2><ul><li><p><strong>low</strong><br>和上面一样的方法,发现并不能注入<br><img src="https://i.imgur.com/BYvzBs8.png"><br>于是从头再来,先试试<code>bee&#39;</code>:<br><img src="https://i.imgur.com/urcjubJ.png"><br>看不到 password 的回显<br>于是多测几次,发现密码无论输入什么,不会对显示有任何影响<br>后续也尝试了一些方法,也不起作用,只能判断出字段数为9<br>于是使用sqlmap<br><img src="https://i.imgur.com/CXelA70.png"><br>成功获得数据库及表名<br><img src="https://i.imgur.com/UB10Ubj.png"><br>接下来查看users表的内容<br><img src="https://i.imgur.com/w7zhDJo.png"><br><img src="https://i.imgur.com/C8Yyej2.png"><br>查看用户名密码<br><img src="https://i.imgur.com/wr9jpJU.png"><br><img src="https://i.imgur.com/Bsk2jtA.png"><br><img src="https://i.imgur.com/ed8N25A.png"></p></li><li><p><strong>medium&amp;high</strong><br>无法注入</p></li></ul><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="(SQLite)"></a>(SQLite)</h2><ul><li><p>SQLite介绍</p><blockquote><p>SQLite含有一张内置表“sqlite_master”,表里存储着type、name、tbl_name、rootpage、sql五个字段。</p></blockquote><table><thead><tr><th>字段</th><th>记录信息</th></tr></thead><tbody><tr><td>type列</td><td>项目的类型，如table、index、view、trigger</td></tr><tr><td>tbl_name</td><td>所从属的表名，如索引所在的表名。对于表来说，该列就是表名本身；</td></tr><tr><td>name</td><td>项目的名称，如表名、索引名等；</td></tr><tr><td>rootpage</td><td>项目在数据库页中存储的编号。对于视图和触发器，该列值为0或者NULL</td></tr><tr><td>sql</td><td>存放着所有表的创建语句，即表的结构。</td></tr></tbody></table></li><li><p><strong>low</strong><br>首先安装php sqlite模块:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> sqlite3<span class="token function">apt-get</span> <span class="token function">install</span> php5-sqlite<span class="token function">service</span> apache2 restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>搜索 man,有三个结果,可见为模糊查询<br><img src="https://i.imgur.com/FbhHIsf.png"></p><p>于是尝试注入:<br><img src="https://i.imgur.com/6QKXtqH.png"><br>接下来常规操作:</p><ul><li>判断字段数: <code>%&#39; order by 6 --</code></li><li>判断字段顺序: <code>%&#39; union select 1,2,3,4,5,6 --</code><br><img src="https://i.imgur.com/NE8EKjS.png"></li><li>查表: <code>%&#39; union select 1,sqlite_version(),name,5,4,6 from sqlite_master --</code><br><img src="https://i.imgur.com/OjJjgnm.png"></li><li>查字段: <code>%&#39; union select 1,sqlite_version(),sql,5,4,6 from sqlite_master --</code><br><img src="https://i.imgur.com/hLGOhoT.png"></li><li>取值: <code>%&#39; union select 1,2,login,password,4,6 from users --</code><br><img src="https://i.imgur.com/PHdKKdB.png"></li><li>解密<br><img src="https://i.imgur.com/XS7Vji4.png"></li></ul></li><li><p><strong>medium&amp;high</strong><br>无法注入</p></li></ul><h2 id="Drupal-SQL-Injection-Drupageddon"><a href="#Drupal-SQL-Injection-Drupageddon" class="headerlink" title="Drupal SQL Injection (Drupageddon)"></a>Drupal SQL Injection (Drupageddon)</h2><blockquote><p>CVE-2014-3704<br>Drupal 是一款用量庞大的CMS，其7.0~7.31版本中存在一处无需认证的SQL漏洞。通过该漏洞，攻击者可以执行任意SQL语句，插入、修改管理员信息，甚至执行任意代码。</p></blockquote><h2 id="Stored-Blog"><a href="#Stored-Blog" class="headerlink" title="Stored (Blog)"></a>Stored (Blog)</h2><p>此类 sql 注入语句一般为 insert 或 update 语句 </p><ul><li><p><strong>low</strong><br>首先判断注入点常规使用 <code>xxx&#39;</code>的方式 输入 <code>hack&#39;</code>提交<br><img src="https://i.imgur.com/Ta8rLGE.png"><br>存在注入点,查表: <code>hack&#39;,(select group_concat(table_name) from information_schema.tables where table_schema=database()))#</code><br><img src="https://i.imgur.com/B2UhxdG.png"><br>后面也是常规操作</p></li><li><p><strong>medium</strong><br>尝试xss注入<br><img src="https://i.imgur.com/5kTOiW6.png"><br>查看代码发现是<code>addslashes()</code>,没有对xss进行防御</p></li><li><p><strong>high</strong><br><code>htmlspecialchars()</code>防御,无法注入<br><img src="https://i.imgur.com/cZRRzjU.png"></p></li></ul><h2 id="Stored-SQLite"><a href="#Stored-SQLite" class="headerlink" title="Stored (SQLite)"></a>Stored (SQLite)</h2><p>常规思路</p><h2 id="Stored-User-Agent"><a href="#Stored-User-Agent" class="headerlink" title="Stored(User-Agent)"></a>Stored(User-Agent)</h2><ul><li><p><strong>low</strong></p></li><li><p>利用User-Agent注入<br><img src="https://i.imgur.com/6WMF4rY.png"><br><img src="https://i.imgur.com/rpOw3MW.png"><br>然后思路也是一样</p></li><li><p><strong>medium&amp;high</strong><br><code>addslashes()</code>与<code>mysql_real_escape_string()</code>防御,未发现注入方法</p></li></ul><h2 id="Stored-XML"><a href="#Stored-XML" class="headerlink" title="Stored (XML)"></a>Stored (XML)</h2><ul><li><p><strong>low</strong><br>抓包可见请求发送给sqli_8-2.php<br><img src="https://i.imgur.com/pAmBe7B.png"><br><img src="https://i.imgur.com/dfKkb1Z.png"><br>尝试对POST体做注入点判断<br><img src="https://i.imgur.com/yK85br3.png"><br>存在注入点,然后尝试常规方法判断字段数,发现无法判断,考虑非<code>select</code>语句,结合reset这个单词,猜测为<code>update</code>语句,尝试报错注入<br>这里我们尝试用<code>updatexml()</code> 方法来注入,依旧是常规思路:库-表-字段-数据<br><img src="https://i.imgur.com/2hf2pK9.png"><br><img src="https://i.imgur.com/SO4qGJ2.png"><br><img src="https://i.imgur.com/UmkInfE.png"><br><img src="https://i.imgur.com/vLtSpgv.png"><br><img src="https://i.imgur.com/SLquFVD.png"><br>大体思路如上</p></li><li><p><strong>medium&amp;high</strong><br>这里的 login 直接取了session的登录名,无法注入<br><img src="https://i.imgur.com/lKAODF9.png"></p></li></ul><h2 id="Boolean-Based"><a href="#Boolean-Based" class="headerlink" title="Boolean-Based"></a>Boolean-Based</h2><ul><li><p><strong>low</strong><br>判断是否是模糊查询,结果是字符串精准匹配<br><img src="https://i.imgur.com/Z486jjN.png"><br><img src="https://i.imgur.com/N6mh2Bv.png"><br>然后就是手工盲注<br><img src="https://i.imgur.com/dlOpvRa.png"><br>不详细展开</p></li><li><p><strong>medium&amp;high</strong><br>无法注入,原因和之前一样<br><img src="https://i.imgur.com/5hzFkpM.png"></p></li></ul><h2 id="Blind-Time-Based"><a href="#Blind-Time-Based" class="headerlink" title="Blind - Time-Based"></a>Blind - Time-Based</h2><ul><li><strong>low</strong><br><img src="https://i.imgur.com/6JsEbpj.png"><br>时间盲注,建议sqlmap或者自行编写脚本跑</li><li><strong>medium&amp;high</strong></li><li>无法注入<br>同上也是<code>addslashes()</code>与<code>mysql_real_escape_string()</code>防御</li></ul><h2 id="Blind-SQLite"><a href="#Blind-SQLite" class="headerlink" title="Blind (SQLite)"></a>Blind (SQLite)</h2><p>思路一样,没什么特别的地方</p><h2 id="Blind-WS-x2F-SOAP"><a href="#Blind-WS-x2F-SOAP" class="headerlink" title="Blind (WS&#x2F;SOAP)"></a>Blind (WS&#x2F;SOAP)</h2><p>思路一样,没什么特别的地方</p>]]></content>
    
    
    
    <tags>
      
      <tag>bwapp</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何利用hexo与GitHub Pages创建自己的博客网站</title>
    <link href="/2019/05/29/How-to-build-hexo/"/>
    <url>/2019/05/29/How-to-build-hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是hexo，GitHub-Pages又是什么？"><a href="#什么是hexo，GitHub-Pages又是什么？" class="headerlink" title="什么是hexo，GitHub Pages又是什么？"></a>什么是hexo，GitHub Pages又是什么？</h1><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a href="https://pages.github.com/">GitHub Pages</a> 是GitHub为开发者提供的一种静态站点托管服务，旨在直接从GitHub存储库托管您的个人，组织或项目页面。<br>GitHub Pages可以与各种博客框架配合搭建个人博客网站，本文主要介绍hexo这种框架与GitHub Pages的配合使用。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>安装Node.js</li><li>安装Git</li><li>GitHub账号</li><li>可联网的环境</li><li>可用域名(非必选)</li></ul><h1 id="本地部署hexo"><a href="#本地部署hexo" class="headerlink" title="本地部署hexo"></a>本地部署hexo</h1><h2 id="安装Node-js与Git"><a href="#安装Node-js与Git" class="headerlink" title="安装Node.js与Git"></a>安装Node.js与Git</h2><p>我这里安装使用的是PPA源安装，若有需要也可以使用nvm等其他方式安装，网上教程很多，就不赘述了。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">sudo apt-get update  sudo apt-get install npm  sudo apt-get install nodejs  sudo apt-get install git  </code></pre></div></figure><h2 id="安装hexo与next主题"><a href="#安装hexo与next主题" class="headerlink" title="安装hexo与next主题"></a>安装hexo与next主题</h2><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ npm install -g hexo-cli//创建文件夹$ mkdir [filename]//进入新建的hexo文件夹$ cd [filename]//初始化$ hexo init    //安装git部署插件$ npm install hexo-deployer-git --save//配置git身份信息$ git config --global user.name &quot;[yourname]&quot;$ git config --global user.email &quot;[youremail]&quot;$ git clone https://github.com/iissnan/hexo-theme-next.git themes/next</code></pre></div></figure><p>安装好后打开hexo文件夹的_config.yml文件，找到theme:landscape，改为next，其他注释按需修改。<br>在本地查看部署效果：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ hexo g$ hexo s</code></pre></div></figure><p>访问<a href="http://localhost:4000/">http://localhost:4000/</a></p><h1 id="关联GitHub-Pages"><a href="#关联GitHub-Pages" class="headerlink" title="关联GitHub Pages"></a>关联GitHub Pages</h1><h2 id="创建个人的GitHub-Pages"><a href="#创建个人的GitHub-Pages" class="headerlink" title="创建个人的GitHub Pages"></a>创建个人的GitHub Pages</h2><p>如果没有GitHub账号，点击<a href="https://github.com/">GitHub</a>使用邮箱注册，然后新建仓库，格式应该为username .github.io，username是你的GitHub用户名，这里的格式不能错。<a href="https://pages.github.com/">详见</a></p><h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><p>之前只是本地部署，接下来我们需要将本地项目推送到刚刚创建的GitHub仓库中。<br>首先编辑站点文件夹下的_config.yml文件，找到deploy这一项，修改为如下格式：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">deploy:  type: git  repository: git@github.com:wsr3005/wsr3005.github.io.git  branch: master</code></pre></div></figure><p>只需输入</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">hexo d</code></pre></div></figure><p>即可完成推送，此时在地址栏输入***.github.io，发现博客上线。</p><h2 id="绑定域名-可选"><a href="#绑定域名-可选" class="headerlink" title="绑定域名(可选)"></a>绑定域名(可选)</h2><ul><li>本地hexo的source文件夹下创建CNAME，其中输入你的域名</li><li>域名添加解析</li><li>GitHub仓库设置中将Custom domain设置为你的域名</li><li>本地推送修改到仓库</li></ul><p>未完待续</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
