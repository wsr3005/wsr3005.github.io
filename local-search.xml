<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux命令备忘录</title>
    <link href="/2022/08/25/Linux%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <url>/2022/08/25/Linux%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>[Tab]</td><td>命令补全或文件补齐</td></tr><tr><td>[ctrl]-c</td><td>中断当前执行的程序</td></tr><tr><td>[ctrl]-d</td><td>键盘输入结束,即EOF,相当于输入exit</td></tr><tr><td>[ctrl]-l</td><td>清屏</td></tr><tr><td>[ctrl]-m</td><td>回车</td></tr><tr><td>[ctrl]-r</td><td>按字符串寻找历史命令</td></tr></tbody></table><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl A</td><td>移动光标到命令行首(同home)</td></tr><tr><td>Ctrl E</td><td>移动光标到命令行尾(同end)</td></tr><tr><td>Ctrl ]</td><td>从当前光标往后搜索字符串，用于快速移动到该字符串</td></tr><tr><td>Ctrl Alt ]</td><td>从当前光标往前搜索字符串，用于快速移动到该字符串</td></tr><tr><td>Ctrl K</td><td>删除光标之后所有字符</td></tr><tr><td>Ctrl U</td><td>清空当前行</td></tr><tr><td>Ctrl W</td><td>删除光标前的单词(Word, 不包含空格的字符串)</td></tr><tr><td>Ctrl Y</td><td>粘贴Ctrl W或Ctrl K删除的内容</td></tr><tr><td>Ctrl X Ctrl E</td><td>调出系统默认编辑器编辑当前输入的命令，退出编辑器时，命令执行</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl Z</td><td>把当前进程放到后台（之后可用’’fg’’命令回到前台）</td></tr><tr><td>Shift Insert</td><td>粘贴（相当于Windows的Ctrl V）</td></tr><tr><td>Ctrl PageUp</td><td>屏幕输出向上翻页</td></tr><tr><td>Ctrl PageDown</td><td>屏幕输出向下翻页</td></tr></tbody></table><h2 id="帮助与提示"><a href="#帮助与提示" class="headerlink" title="帮助与提示"></a>帮助与提示</h2><h3 id="–help指令"><a href="#–help指令" class="headerlink" title="–help指令"></a>–help指令</h3><h3 id="man-page"><a href="#man-page" class="headerlink" title="man page"></a>man page</h3><blockquote><p>man是manual(操作说明)<br>用法为<code>man [指令(手册页)]</code><br>man 手册页分为很多区块,具体分类可参见下表</p></blockquote><p> man 手册页通过名称和所属分类标识。有些不同分类的 man 手册页名字可能相同，比如 man(1) 和 man(7)，这时需要额外指明分类以访问需要的手册。例如:<br><code>$ man 5 passwd</code><br>会显示有关文件&#x2F;etc&#x2F;passwd，而非命令 <code>passwd</code>，的内容。</p><table><thead><tr><th align="center">代号</th><th align="left">代表内容</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">使用者在shell环境中可以操作的指令或可可执行文件</td></tr><tr><td align="center">2</td><td align="left">系统核心可调用的函数与工具等</td></tr><tr><td align="center">3</td><td align="left">一些常用的函数（function）与函数库（library），大部分为C的函数库（libc）</td></tr><tr><td align="center">4</td><td align="left">设备文件的说明，通常在&#x2F;dev下的文件</td></tr><tr><td align="center">5</td><td align="left">配置文件或者是某些文件的格式</td></tr><tr><td align="center">6</td><td align="left">游戏（games）</td></tr><tr><td align="center">7</td><td align="left">惯例与协定等，例如Linux文件系统、网络协定、ASCII code等等的说明</td></tr><tr><td align="center">8</td><td align="left">系统管理员可用的管理指令</td></tr><tr><td align="center">9</td><td align="left">跟kernel有关的文件</td></tr></tbody></table><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="用量与容量"><a href="#用量与容量" class="headerlink" title="用量与容量"></a>用量与容量</h3><ul><li>df:列出文件系统整体磁盘用量</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-4zqfqrl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-4zqfqrl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# df [-ahikHTm] [目录或文件名]<br>选项与参数: <br>-a : 列出所有的文件系统，包括系统特有的 /proc 等文件系统；<br>-k : 以 KBytes 的容量显示各文件系统；<br>-m : 以 MBytes 的容量显示各文件系统；<br>-h : 以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；(常用)<br>-H : 以 M=1000K 取代 M=1024K 的进位方式；<br>-T : 连同该 partition 的 filesystem 名称 （例如 xfs） 也列出；<br>-i : 不用磁盘容量，而以 inode 的数量来显示<br></code></pre></td></tr></table></div></figure><ul><li>du:评估文件系统磁盘用量</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-vxrkuql78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-vxrkuql78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# du [-ahskm] 文件或目录名称<br>选项与参数: <br>-a : 列出所有的文件与目录容量，因为默认仅统计目录下面的文件量而已。<br>-h : 以人们较易读的容量格式 （G/M） 显示；(常用)<br>-s : 列出总量而已，而不列出每个各别的目录占用容量；<br>-S : 不包括子目录下的总计，与 -s 有点差别。<br>-k : 以 KBytes 列出容量显示；<br>-m : 以 MBytes 列出容量显示；<br></code></pre></td></tr></table></div></figure><h3 id="链接-ln"><a href="#链接-ln" class="headerlink" title="链接:ln"></a>链接:ln</h3><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-fwpch5l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-fwpch5l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# ln [-sf] 来源文件 目标文件<br>选项与参数: <br>-s : 如果不加任何参数就进行链接，那就是hard link，至于 -s 就是symbolic link<br>-f : 如果 目标文件 存在时，就主动的将目标文件直接移除后再创建！<br></code></pre></td></tr></table></div></figure><h3 id="磁盘分区、格式化、检验、挂载（暂缓）"><a href="#磁盘分区、格式化、检验、挂载（暂缓）" class="headerlink" title="磁盘分区、格式化、检验、挂载（暂缓）"></a>磁盘分区、格式化、检验、挂载（暂缓）</h3><h3 id="压缩、打包、备份"><a href="#压缩、打包、备份" class="headerlink" title="压缩、打包、备份"></a>压缩、打包、备份</h3><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><ul><li>gzip,zcat&#x2F;zmore&#x2F;zless&#x2F;zgrep</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-b316uml78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-b316uml78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ gzip [-cdtv#] 文件名<br>[dmtsai@study ~]$ zcat 文件名.gz<br>选项与参数: <br>-c : 将压缩的数据输出到屏幕上，可通过数据流重导向来处理；<br>-d : 解压缩的参数；<br>-t : 检验压缩文件的一致性<br>-v : 显示原文件/压缩文件的压缩比等信息；<br><span class="hljs-meta prompt_">-# </span><span class="language-bash">: \<span class="hljs-comment"># 为数字的意思，代表压缩等级，-1 最快，但是压缩比最差 -9 最慢，但是压缩比最好 默认是 -6</span></span><br></code></pre></td></tr></table></div></figure><ul><li>bzip2,bzcat&#x2F;bzmore&#x2F;bzless&#x2F;bzgrep</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-w1yvrel78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-w1yvrel78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ bzip2 [-cdkzv#] 文件名<br>[dmtsai@study ~]$ bzcat 文件名.bz2<br>选项与参数: <br>-c : 将数据输出到屏幕上<br>-d : 解压缩的参数<br>-k : 保留原始文件，而不会删除原始的文件喔！<br>-z : 压缩的参数 （默认值，可以不加）<br>-v : 可以显示出原文件/压缩文件的压缩比等信息；<br><span class="hljs-meta prompt_">-# </span><span class="language-bash">: 与 gzip 同样的，都是在计算压缩比的参数， -9 最佳， -1 最快！</span><br></code></pre></td></tr></table></div></figure><ul><li>xz,xzcat&#x2F;xzmore&#x2F;xzless&#x2F;xzgrep</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-ujgveyl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-ujgveyl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ xz [-dtlkc#] 文件名<br>[dmtsai@study ~]$ xcat 文件名.xz<br>选项与参数: <br>-c : 将数据由屏幕上输出<br>-d : 解压缩<br>-k : 保留原本的文件不删除<br>-t : 测试压缩文件的完整性，看有没有错误<br>-l : 列出压缩文件的相关信息<br><span class="hljs-meta prompt_">-# </span><span class="language-bash">: 同gzip</span><br></code></pre></td></tr></table></div></figure><h4 id="打包-tar"><a href="#打包-tar" class="headerlink" title="打包:tar"></a>打包:tar</h4><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-hrzqckl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-hrzqckl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">打包与压缩</span><br>[dmtsai@study ~]$ tar [-z|-j|-J] [cv] [-f 待创建的新文件名] filename... <br><span class="hljs-meta prompt_"># </span><span class="language-bash">察看文件名</span><br>[dmtsai@study ~]$ tar [-z|-j|-J] [tv] [-f 既有的 tar文件名] <br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压缩</span><br>[dmtsai@study ~]$ tar [-z|-j|-J] [xv] [-f 既有的 tar文件名] [-C 目录] <br>选项与参数: <br>-c : 创建打包文件，可搭配 -v 来察看过程中被打包的文件名（filename）<br>-t : 察看打包文件的内容含有哪些文件名，重点在察看“文件名”就是了；<br>-x : 解打包或解压缩的功能，可以搭配 -C （大写） 在特定目录解压,特别留意的是， -c, -t, -x 不可同时出现在一串命令行中。<br>-z : 通过 gzip 的支持进行压缩/解压缩: 此时文件名最好为 *.tar.gz<br>-j : 通过 bzip2 的支持进行压缩/解压缩: 此时文件名最好为 *.tar.bz2<br>-J : 通过 xz 的支持进行压缩/解压缩: 此时文件名最好为 *.tar.xz,特别留意， -z, -j, -J 不可以同时出现在一串命令行中<br>-v : 在压缩/解压缩的过程中，将正在处理的文件名显示出来！<br>-f filename: -f 后面要立刻接要被处理的文件名！建议 -f 单独写一个选项啰！（比较不会忘记）<br>-C 目录 : 这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。其他后续练习会使用到的选项介绍: <br>-p（小写） : 保留备份数据的原本权限与属性，常用于备份（-c）重要的配置文件<br>-P（大写） : 保留绝对路径，亦即允许备份数据中含有根目录存在之意；<br>--exclude=FILE: 在压缩的过程中，不要将 FILE 打包！<br></code></pre></td></tr></table></div></figure><p>记法:</p><ul><li>压缩:<code>tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称</code></li><li>解压:<code>tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</code></li><li>查询:<code>tar -jtv -f filename.tar.bz2</code></li><li>z:gzip</li><li>j:bzip2</li><li>J:xz</li></ul><p>解压单独文件方法:<br>1.先查询:<br><code>tar -jtv -f filename.tar.bz2 | grep &#39;单独文件名&#39;</code><br>2.单独解开:<br><code>tar -jxv -f filename.tar.bz2 单独文件名</code></p><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><ul><li>xfs 文件系统的备份与恢复<figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-u1wwcql78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-u1wwcql78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份</span><br>[root@study ~]# xfsdump [-L S_label] [-M M_label] [-l #] [-f 备份文件] 待备份数据<br>[root@study ~]# xfsdump -I<br>选项与参数: <br>-L : xfsdump 会纪录每次备份的 session 标头，这里可以填写针对此文件系统的简易说明<br>-M : xfsdump 可以纪录储存媒体的标头，这里可以填写此媒体的简易说明<br>-l : 是 L 的小写，就是指定等级～有 0~9 共 10 个等级喔！ （默认为 0，即完整备份）<br>-f : 类似 tar 后面接产生的文件，亦可接例如 /dev/st0 设备文件名或其他一般文件文件名等<br>-I : 从 /var/lib/xfsdump/inventory 列出目前备份的信息状态<br><span class="hljs-meta prompt_"># </span><span class="language-bash">还原</span><br>[root@study ~]# xfsrestore -I &lt;==用来察看备份文件数据<br>[root@study ~]# xfsrestore [-f 备份文件] [-L S_label] [-s] 待复原目录 &lt;==单一文件全系统复原<br>[root@study ~]# xfsrestore [-f 备份文件] -r 待复原目录 &lt;==通过累积备份文件来复原系统<br>[root@study ~]# xfsrestore [-f 备份文件] -i 待复原目录 &lt;==进入互动模式<br>选项与参数: <br>-I : 跟 xfsdump 相同的输出！可查询备份数据，包括 Label 名称与备份时间等<br>-f : 后面接的就是备份文件！企业界很有可能会接 /dev/st0 等磁带机！我们这里接文件名！<br>-L : 就是 Session 的 Label name 喔！可用 -I 查询到的数据，在这个选项后输入！<br>-s : 需要接某特定目录，亦即仅复原某一个文件或目录之意！<br>-r : 如果是用文件来储存备份数据，那这个就不需要使用。如果是一个磁带内有多个文件，<br>需要这东西来达成累积复原<br>-i : 进入互动模式，进阶管理员使用的！一般我们不太需要操作它！<br></code></pre></td></tr></table></div></figure></li><li>其他常见压缩和备份工具<figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-jk5ewhl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-jk5ewhl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">dd</span></span><br>[root@study ~]# dd if=&quot;input_file&quot; of=&quot;output_file&quot; bs=&quot;block_size&quot; count=&quot;number&quot;<br>选项与参数: <br>if : input file 也可以是设备<br>of : output file 也可以是设备<br>bs : 规划的一个 block 的大小，若未指定则默认是 512 Bytes（一个 sector 的大小）<br>count: 多少个 bs 的意思。<br><span class="hljs-meta prompt_"># </span><span class="language-bash">cpio</span><br>[root@study ~]# cpio -ovcB &gt; [file|device] &lt;==备份<br>[root@study ~]# cpio -ivcdu &lt; [file|device] &lt;==还原<br>[root@study ~]# cpio -ivct &lt; [file|device] &lt;==察看<br>备份会使用到的选项与参数: <br>-o : 将数据 copy 输出到文件或设备上<br>-B : 让默认的 Blocks 可以增加至 5120 Bytes ，默认是 512 Bytes 这样的好处是可以让大文件的储存速度加快（参考 inodes 概念）还原会使用到的选项与参数: <br>-i : 将数据自文件或设备 copy 到系统中<br>-d : 自动创建目录 使用 cpio 所备份的数据内容不见得会在同一层目录中，因此需要让 cpio 在还原时可以创建新目录<br>-u : 自动的将较新的文件覆盖较旧的文件<br>-t : 需配合 -i 选项，可用在&quot;查看&quot;以 cpio 创建的文件或设备的内容一些可共享的选项与参数: <br>-v : 让储存的过程中文件名称可以在屏幕上显示<br>-c : 一种较新的 portable format 方式储存<br></code></pre></td></tr></table></div></figure></li></ul><h2 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><pre><code class="hljs">[root@study ~]# ls [-aAdfFhilnrRSt] filepath..[root@study ~]# ls [--color=&#123;never,auto,always&#125;] 文件名或目录名称..[root@study ~]# ls [--full-time] 文件名或目录名称..选项与参数: -a : 全部的文件，连同隐藏文件（ 开头为 . 的文件） 一起列出来（常用）-----------------------------------------------------------------------A : 全部的文件，连同隐藏文件，但不包括 . 与 .. 这两个目录-d : 仅列出目录本身，而不是列出目录内的文件数据（常用）-----------------------------------------------------------------------f : 直接列出结果，而不进行排序 （ls 默认会以文件名排序！）-F : 根据文件、目录等信息，给予附加数据结构，例如: *:代表可可执行文件； /:代表目录； =:代表 socket 文件； |:代表 FIFO 文件；-h : 将文件大小以人类较易读的方式（例如 GB, KB 等等）列出来；-i : 列出 inode 号码，inode 的意义下一章将会介绍；-l : 长数据串行出，包含文件的属性与权限等等数据；（常用）-----------------------------------------------------------------------n : 列出 UID 与 GID 而非使用者与群组的名称 （UID与GID会在帐号管理提到！）-r : 将排序结果反向输出，例如: 原本文件名由小到大，反向则为由大到小；-R : 连同子目录内容一起列出来，等于该目录下的所有文件都会显示出来；-S : 以文件大小大小排序，而不是用文件名排序；-t : 依时间排序，而不是用文件名。--color=never : 不要依据文件特性给予颜色显示；--color=always : 显示颜色--color=auto : 让系统自行依据设置来判断是否给予颜色--full-time : 以完整时间模式 （包含年、月、日、时、分） 输出--time=&#123;atime,ctime&#125; : 输出 access 时间或改变权限属性时间 （ctime）而非内容变更时间 （modification time）</code></pre><h3 id="cp-rm-mv"><a href="#cp-rm-mv" class="headerlink" title="cp rm mv"></a>cp rm mv</h3><ul><li>cp</li></ul><blockquote><p>在复制时清楚4点  </p><ul><li>是否完整保留源文件信息</li><li>源文件是否为链接文件</li><li>源文件是否为特殊文件(FIFO socket)</li><li>源文件是否为目录</li></ul></blockquote><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-kzxsxql78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-kzxsxql78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# cp [-adfilprsu] 来源文件（source） 目标文件（destination）<br>[root@study ~]# cp [options] source1 source2 source3 .... directory<br>例:若 ~/.bashrc 比 /tmp/bashrc 新才复制过来<br>[root@study tmp]# cp -u ~/.bashrc /tmp/bashrc<br><br>选项与参数: <br>-a : 相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明；（常用）<br>----------------------------------------------------------------------<br>-d : 若来源文件为链接文件的属性（link file），则复制链接文件属性而非文件本身；<br>-f : 为强制（force）的意思，若目标文件已经存在且无法打开，则移除后再尝试一次；<br>-i : 若目标文件（destination）已经存在时，在覆盖时会先询问动作的进行（常用）<br>----------------------------------------------------------------------<br>-l : 进行硬式链接（hard link）的链接文件创建，而非复制文件本身；<br>-p : 连同文件的属性（权限、用户、时间）一起复制过去，而非使用默认属性（备份常用）；<br>-r : 递回持续复制，用于目录的复制行为；（常用）<br>----------------------------------------------------------------------<br>-s : 复制成为符号链接文件 （symbolic link），亦即“捷径”文件；<br>-u : destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制。<br>--preserve=all : 除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了。<br>最后需要注意的，如果来源文件有两个以上，则最后一个目的文件一定要是“目录”才行！<br></code></pre></td></tr></table></div></figure><ul><li>rm</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-e83cu5l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-e83cu5l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# rm [-fir] 文件或目录<br>选项与参数: <br>-f : 就是 force 的意思，忽略不存在的文件，不会出现警告讯息；<br>-i : 互动模式，在删除前会询问使用者是否动作<br>-r : 递回删除啊！最常用在目录的删除了！这是非常危险的选项！！！<br>```  <br>- mv<br><br>```shell<br>[root@study ~]# mv [-fiu] source destination<br>[root@study ~]# mv [options] source1 source2 source3 .... directory<br>选项与参数: <br>-f : force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；<br>-i : 若目标文件 （destination） 已经存在时，就会询问是否覆盖！<br>-u : 若目标文件已经存在，且 source 比较新，才会更新 （update）<br></code></pre></td></tr></table></div></figure><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><h4 id="直接查看"><a href="#直接查看" class="headerlink" title="直接查看"></a>直接查看</h4><ul><li>cat(第一行到最后一行连续显示在屏幕上)</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-kquvdpl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-kquvdpl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# cat [-AbEnTv]<br>选项与参数: <br>-A : 相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；<br>-b : 列出行号，仅针对非空白行做行号显示，空白行不标行号！<br>-E : 将结尾的断行字符 $ 显示出来；<br>-n : 打印出行号，连同空白行也会有行号，与 -b 的选项不同；<br>-T : 将 [tab] 按键以 ^I 显示出来；<br>-v : 列出一些看不出来的特殊字符<br></code></pre></td></tr></table></div></figure><ul><li>tac(cat倒过来)</li><li>nl(添加行号打印)</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-fyhl93l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-fyhl93l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# nl [-bnw] 文件<br>选项与参数: <br>-b : 指定行号指定的方式，主要有两种: <br>    -b a : 表示不论是否为空行，也同样列出行号（类似 cat -n）；<br>    -b t : 如果有空行，空的那一行不要列出行号（默认值）；<br>-n : 列出行号表示的方法，主要有三种: <br>    -n ln : 行号在屏幕的最左方显示；<br>    -n rn : 行号在自己字段的最右方显示，且不加 0 ；<br>    -n rz : 行号在自己字段的最右方显示，且加 0 ；<br>-w : 行号字段的占用的字符数。<br></code></pre></td></tr></table></div></figure><h4 id="分页查看"><a href="#分页查看" class="headerlink" title="分页查看"></a>分页查看</h4><ul><li>more</li></ul><table><thead><tr><th align="left">按键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">空格</td><td align="left">代表向下翻一页；</td></tr><tr><td align="left">Enter</td><td align="left">代表向下翻“一行”</td></tr><tr><td align="left">&#x2F;string</td><td align="left">代表在这个显示的内容当中，向下查找string这个关键字</td></tr><tr><td align="left">:f</td><td align="left">立刻显示出文件名以及目前显示的行数</td></tr><tr><td align="left">q</td><td align="left">代表立刻离开 more ，不再显示该文件内容</td></tr><tr><td align="left">b 或 [ctrl]-b</td><td align="left">代表往回翻页，不过这动作只对文件有用，对管线无用</td></tr></tbody></table><ul><li>less</li></ul><table><thead><tr><th align="left">按键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">空格</td><td align="left">代表向下翻一页；</td></tr><tr><td align="left">[pagedown]</td><td align="left">向下翻动一页</td></tr><tr><td align="left">[pageup]</td><td align="left">向上翻动一页</td></tr><tr><td align="left">&#x2F;string</td><td align="left">代表在这个显示的内容当中，向下查找string这个关键字</td></tr><tr><td align="left">?string</td><td align="left">代表在这个显示的内容当中，向上查找string这个关键字</td></tr><tr><td align="left">n</td><td align="left">重复前一个查找 （与 &#x2F; 或 ? 有关！）</td></tr><tr><td align="left">N</td><td align="left">反向地重复前一个查找 （与 &#x2F; 或 ? 有关！</td></tr><tr><td align="left">g</td><td align="left">前进到这个数据的第一行去</td></tr><tr><td align="left">G</td><td align="left">前进到这个数据的最后一行去 （注意大小写）</td></tr><tr><td align="left">q</td><td align="left">离开</td></tr></tbody></table><h4 id="数据撷取"><a href="#数据撷取" class="headerlink" title="数据撷取"></a>数据撷取</h4><ul><li>head(从头取出几行)</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-ziwcfcl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-ziwcfcl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# head [-n number] 文件<br>选项与参数: <br>-n : 后面接数字，代表显示几行的意思<br></code></pre></td></tr></table></div></figure><ul><li>tail(从最后取出几行)</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-nnz1dsl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-nnz1dsl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# tail [-n number] 文件<br>选项与参数: <br>-n : 后面接数字，代表显示几行的意思<br>-f : 表示持续监测后面所接的文件名，要等到按下[ctrl]-c才会结束tail的监测<br></code></pre></td></tr></table></div></figure><h4 id="非纯文本-od"><a href="#非纯文本-od" class="headerlink" title="非纯文本:od"></a>非纯文本:od</h4><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-75erqrl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-75erqrl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# od [-t TYPE] 文件<br>选项或参数: <br>-t : 后面可以接各种“类型 （TYPE）”的输出，例如: <br>    a : 利用默认的字符来输出；<br>    c : 使用 ASCII 字符来输出<br>    d[size] : 利用十进制（decimal）来输出数据，每个整数占用 size Bytes ；<br>    f[size] : 利用浮点数值（floating）来输出数据，每个数占用 size Bytes ；<br>    o[size] : 利用八进位（octal）来输出数据，每个整数占用 size Bytes ；<br>    x[size] : 利用十六进制（hexadecimal）来输出数据，每个整数占用 size Bytes ；<br></code></pre></td></tr></table></div></figure><h4 id="修改文件时间或创建文件-touch"><a href="#修改文件时间或创建文件-touch" class="headerlink" title="修改文件时间或创建文件:touch"></a>修改文件时间或创建文件:touch</h4><blockquote><ul><li>modification time （mtime）:  文件的“内容数据”变更的时间，内容数据指的是文件的内容，而不是文件的属性或权限！</li><li>status time （ctime）:  文件的“状态 （status）”改变的时间.比如权限与属性.</li><li>access time （atime）:  当“该文件的内容被取用”时，就会更新这个读取时间（access）。比如使用 cat 去读取 &#x2F;etc&#x2F;man_db.conf .</li></ul></blockquote><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-nvmhdll78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-nvmhdll78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# touch [-acdmt] 文件<br>选项与参数: <br>-a : 仅修订 access time；<br>-c : 仅修改文件的时间，若该文件不存在则不创建新文件；<br>-d : 后面可以接欲修订的日期而不用目前的日期，也可以使用 --date=&quot;日期或时间&quot;<br>-m : 仅修改 mtime ；<br>-t : 后面可以接欲修订的时间而不用目前的时间，格式为[YYYYMMDDhhmm]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果 <span class="hljs-built_in">touch</span> 不加参数后接文件，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">则该文件的三个时间 （atime/ctime/mtime） 都会更新为目前的时间</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">若该文件不存在，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">则会主动的创建一个新的空的文件</span><br></code></pre></td></tr></table></div></figure><h3 id="文件默认权限-umask"><a href="#文件默认权限-umask" class="headerlink" title="文件默认权限:umask"></a>文件默认权限:umask</h3><blockquote><p>umask 管理一个文件或目录创建时的权限默认值</p></blockquote><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-gdip3rl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-gdip3rl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# umask<br>0022  这是root的权限默认值,一般用户是0002<br>[root@study ~]# umask -S<br>u=rwx,g=rx,o=rx<br></code></pre></td></tr></table></div></figure><h3 id="文件隐藏属性"><a href="#文件隐藏属性" class="headerlink" title="文件隐藏属性"></a>文件隐藏属性</h3><ul><li>chattr 设置文件隐藏属性</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-kwu7pbl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-kwu7pbl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# chattr [+-=][ASacdistu] 文件或目录名称<br>选项与参数: <br>+ : 增加某一个特殊参数，其他原本存在参数则不动。<br>- : 移除某一个特殊参数，其他原本存在参数则不动。<br>= : 设置一定，且仅有后面接的参数<br>A : 当设置了 A 这个属性时，若你有存取此文件（或目录）时，他的存取时间 atime 将不会被修改，<br>可避免 I/O 较慢的机器过度的存取磁盘。（目前建议使用文件系统挂载参数处理这个项目）<br>S : 一般文件是非同步写入磁盘的（原理请参考[前一章sync](../Text/index.html#sync)的说明），如果加上 S 这个属性时，<br>当你进行任何文件的修改，该更动会“同步”写入磁盘中。<br>a : 当设置 a 之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有root 才能设置这属性<br>c : 这个属性设置之后，将会自动的将此文件“压缩”，在读取的时候将会自动解压缩，<br>但是在储存的时候，将会先进行压缩后再储存（看来对于大文件似乎蛮有用的！）<br>d : 当 dump 程序被执行的时候，设置 d 属性将可使该文件（或目录）不会被 dump 备份<br>i : 这个 i 可就很厉害了！他可以让一个文件“不能被删除、改名、设置链接也无法写入或新增数据！”<br>对于系统安全性有相当大的助益！只有 root 能设置此属性<br>s : 当文件设置了 s 属性时，如果这个文件被删除，他将会被完全的移除出这个硬盘空间，<br>所以如果误删了，完全无法救回来了喔！<br>u : 与 s 相反的，当使用 u 来设置文件时，如果该文件被删除了，则数据内容其实还存在磁盘中，<br>可以使用来救援该文件喔！<br>注意1: 属性设置常见的是 a 与 i 的设置值，而且很多设置值必须要身为 root 才能设置<br>注意2: xfs 文件系统仅支持 AadiS 而已<br>主要使用 +i和+a<br></code></pre></td></tr></table></div></figure><ul><li>lsattr 显示文件隐藏属性</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-qv7l9vl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-qv7l9vl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# lsattr [-adR] 文件或目录<br>选项与参数: <br>-a : 将隐藏文件的属性也秀出来；<br>-d : 如果接的是目录，仅列出目录本身的属性而非目录内的文件名；<br>-R : 连同子目录的数据也一并列出来！<br></code></pre></td></tr></table></div></figure><h3 id="观察文件类型-file"><a href="#观察文件类型-file" class="headerlink" title="观察文件类型:file"></a>观察文件类型:file</h3><h3 id="命令与文件查找"><a href="#命令与文件查找" class="headerlink" title="命令与文件查找"></a>命令与文件查找</h3><h4 id="命令查找-which-寻找二进制文件"><a href="#命令查找-which-寻找二进制文件" class="headerlink" title="命令查找:which(寻找二进制文件)"></a>命令查找:which(寻找二进制文件)</h4><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-1ys2hnl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-1ys2hnl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# which [-a] command<br>选项或参数: <br>-a : 将所有由 PATH 目录中可以找到的指令均列出，而不止第一个被找到的指令名称<br></code></pre></td></tr></table></div></figure><h4 id="文件与文件名查找"><a href="#文件与文件名查找" class="headerlink" title="文件与文件名查找"></a>文件与文件名查找</h4><ul><li>whereis(在特定目录中寻找文件名)</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-wlhg6kl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-wlhg6kl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# whereis [-bmsu] 文件或目录名<br>选项与参数: <br>-l :可以列出 whereis 会去查询的几个主要目录而已<br>-b :只找 binary 格式的文件<br>-m :只找在说明文档 manual 路径下的文件<br>-s :只找 source 来源文件<br>-u :查找不在上述三个项目当中的其他特殊文件<br></code></pre></td></tr></table></div></figure><ul><li>locate&#x2F;updatedb</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-9lesfkl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-9lesfkl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# locate [-ir] keyword<br>选项与参数: <br>-i : 忽略大小写的差异；<br>-c : 不输出文件名，仅计算找到的文件数量<br>-l : 仅输出几行的意思，例如输出五行则是 -l 5<br>-S : 输出 locate 所使用的数据库文件的相关信息，包括该数据库纪录的文件/目录数量等<br>-r : 后面可接正则表达式的显示方式<br>updatedb 用来更新locate的数据库<br></code></pre></td></tr></table></div></figure><ul><li>find</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-sqs193l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-sqs193l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@study ~]# find [PATH] [option] [action]<br>选项与参数: <br>1.  与时间有关的选项: 共有 -atime, -ctime 与 -mtime ，以 -mtime 为例,参见下图<br>    -mtime n : n 为数字，意义为在 n 天之前的“一天之内”被更动过内容的文件；<br>    -mtime +n : 列出在 n 天之前（不含 n 天本身）被更动过内容的文件文件名；<br>    -mtime -n : 列出在 n 天之内（含 n 天本身）被更动过内容的文件文件名。<br>    -newer file : file 为一个存在的文件，列出比 file 还要新的文件文件名<br>2.  与使用者或群组名称有关的参数: <br>    -uid n : n 为数字，这个数字是使用者的帐号 ID，亦即 UID <br>    -gid n : n 为数字，这个数字是群组名称的 ID，亦即 GID<br>    -user name : name 为使用者帐号名称<br>    -group name: name 为用户组名称<br>    -nouser : 寻找文件的拥有者不存在于 /etc/passwd 的文件<br>    -nogroup : 寻找文件的拥有组不存在于 /etc/group 的文件.自行安装软件时，很可能该软件的属性当中并没有文件拥有者，此时可以使用 -nouser 与 -nogroup 查找。<br>3.  与文件权限及名称有关的参数: <br>    -name filename: 查找文件名称为 filename 的文件；<br>    -size [+-]SIZE: 查找比 SIZE 还要大（+）或小（-）的文件。这个 SIZE 的规格有: c: 代表 Byte， k: 代表 1024Bytes。所以，要找比 50KB 还要大的文件，就是“ -size +50k ”<br>    -type TYPE : 查找文件的类型为 TYPE 的，类型主要有: 一般正规文件 （f）, 设备文件 （b, c）, 目录 （d）, 链接文件 （l）, socket （s）, 及 FIFO （p） 等属性。<br>    -perm mode : 查找文件权限“刚好等于” mode 的文件，这个 mode 为类似 chmod的属性值，举例来说， -rwsr-xr-x 的属性为 4755 ！<br>    -perm -mode : 查找“至少符合每一位(rwx) mode 的权限”的文件，比如查找 -rwxr--r-- ，亦即 0744 的文件，使用 -perm -0744，那么文件权限为 4755 时，也会被列出来，因为 -rwsr-xr-x 的属性已经囊括了 -rwxr--r-- 的属性了。<br>    -perm /mode : 查找文件权限“符合任一(rwx中任一位符合 mode 皆可) mode 的权限”的文件，比如查找-rwxr-xr-x ，亦即 -perm /755 时，但一个文件属性为 -rw-------也会被列出来，因为他有 -rw.... 的属性存在<br>4.  额外可进行的动作: <br>    -exec command : command 为其他指令，-exec 后面可再接额外的指令来处理查找到的结果。<br>    -print : 将结果打印到屏幕上，这个动作是默认动作！<br></code></pre></td></tr></table></div></figure><p><img src="https://i.imgur.com/IirSlhO.png"></p><h2 id="vim-amp-vi"><a href="#vim-amp-vi" class="headerlink" title="vim&amp;vi"></a>vim&amp;vi</h2><blockquote><p>vi 三种模式:</p><ul><li>命令模式 （command mode）</li><li>编辑模式 （insert mode）</li><li>命令行命令模式 （command-line mode）</li></ul></blockquote><h3 id="按键说明"><a href="#按键说明" class="headerlink" title="按键说明"></a>按键说明</h3><ul><li>命令模式</li></ul><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td><strong>移动光标</strong></td><td></td></tr><tr><td>h 或（←）</td><td>光标向左移动一个字符</td></tr><tr><td>j 或（↓）</td><td>光标向下移动一个字符</td></tr><tr><td>k 或（↑）</td><td>光标向上移动一个字符</td></tr><tr><td>l 或（→）</td><td>光标向右移动一个字符</td></tr><tr><td><em><strong>[Ctrl] + f</strong></em></td><td>屏幕向下移动一页，相当于 [Page Down]（常用）</td></tr><tr><td><em><strong>[Ctrl] + b</strong></em></td><td>屏幕向上移动一页，相当于 [Page Up]（常用）</td></tr><tr><td>[Ctrl] + d</td><td>屏幕向下移动半页</td></tr><tr><td>[Ctrl] + u</td><td>屏幕向上移动半页</td></tr><tr><td>+</td><td>到非空白字符的下一行</td></tr><tr><td>-</td><td>到非空白字符的上一行</td></tr><tr><td>n + [space]</td><td>在本行向后移动 n 个字符。</td></tr><tr><td><em><strong>0 或[Home]</strong></em></td><td>到行头（常用）</td></tr><tr><td><em><strong>$ 或[End]</strong></em></td><td>到行尾（常用）</td></tr><tr><td>^</td><td>到本行第一个非<code>blank</code>字符处 所谓<code>blank</code>字符,就是空格，tab，换行，回车等</td></tr><tr><td>g_</td><td>到本行最后一个非<code>blank</code>字符处</td></tr><tr><td>H</td><td>到屏幕最上方那行的第一个字符</td></tr><tr><td>M</td><td>到屏幕中央那行的第一个字符</td></tr><tr><td>L</td><td>到屏幕最下方那行的第一个字符</td></tr><tr><td><em><strong>G</strong></em></td><td>到最后一行（常用）</td></tr><tr><td><em><strong>nG</strong></em></td><td>到第 n 行（可配合:set nu）</td></tr><tr><td><em><strong>gg</strong></em></td><td>到第一行（常用）</td></tr><tr><td><em><strong>n+ [Enter]</strong></em></td><td>n 为数字。光标向下移动 n 列（常用）</td></tr><tr><td>w 或 W</td><td>到下一个单词的开头。</td></tr><tr><td>e 或 E</td><td>到下一个单词的结尾。</td></tr><tr><td>%</td><td>匹配括号移动(光标必须在括号上)</td></tr><tr><td>* 或 #</td><td>匹配光标当前所在的单词</td></tr><tr><td><em><strong>fa</strong></em></td><td>到下一个为a的字符处，a可以是其他字符</td></tr><tr><td><em><strong>t,</strong></em></td><td>到,前的第一个字符。,可以变成其它字符</td></tr><tr><td>F 或 T</td><td>与 f 和 t 方向相反(上一个)</td></tr><tr><td><strong>查找与替换</strong></td><td></td></tr><tr><td>&#x2F;word</td><td>向下查找 （常用）</td></tr><tr><td>?word</td><td>向上查找</td></tr><tr><td>n</td><td>重复上一次查找的动作(无论向上还是向下)</td></tr><tr><td>N</td><td>与 n 作用相反</td></tr><tr><td><em><strong>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</strong></em></td><td>在 n1 与 n2 行间查找 word1 , 并将其替换为 word2（常用）</td></tr><tr><td><em><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</strong></em></td><td>从第一行到最后一行,查找 word1 , 并将其替换为 word2 ,也可用 <em><strong>:%s&#x2F;word1&#x2F;word2&#x2F;g</strong></em>（常用）</td></tr><tr><td><em><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</strong></em></td><td>从第一行到最后一行,查找 word1 ,并将其替换为 word2 ,且显示提示字符给使用者确认 （confirm） 是否需要替换（常用）</td></tr><tr><td><strong>删除、复制与粘贴</strong></td><td></td></tr><tr><td>x, X</td><td>x 为向后删除一个字符 （相当于 [del] 按键）， X 为向前删除一个字符（相当于 [backspace] 亦即是退格键） （常用）</td></tr><tr><td>nx</td><td>连续向后删除 n 个字符</td></tr><tr><td>dd</td><td>删除当前行（常用）</td></tr><tr><td>ndd</td><td>向下删除 n 行（常用）</td></tr><tr><td>d1G</td><td>删除本行到第一行所有数据</td></tr><tr><td>dG</td><td>删除本行到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除光标到本行的最后一个字符</td></tr><tr><td>d0</td><td>删除光标到本行的第一个字符</td></tr><tr><td>yy</td><td>复制光标所在的那一行（常用）</td></tr><tr><td>nyy</td><td>向下复制 n 行（常用）</td></tr><tr><td>y1G</td><td>复制本行到第一行的数据</td></tr><tr><td>yG</td><td>复制本行到最后一行的数据</td></tr><tr><td>y0</td><td>复制光标到行头的数据</td></tr><tr><td>y$</td><td>复制光标到行尾的数据</td></tr><tr><td>Y</td><td>复制整行数据</td></tr><tr><td>p, P</td><td>p 将已复制的数据向后粘贴，P 则为向前粘贴（常用）通常复制的数据超过一行时,会从下(上)一行开始粘贴</td></tr><tr><td>J</td><td>将本行与下一行合为一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[10cj ]</td></tr><tr><td>u</td><td>撤销（常用）</td></tr><tr><td>[Ctrl]+r</td><td>取消撤销（常用）</td></tr><tr><td>.</td><td>重复前一个动作（常用）</td></tr><tr><td><strong>进阶</strong></td><td></td></tr><tr><td>start position + [N] command + end position</td><td>从start position到end position重复某个命令N次</td></tr></tbody></table><ul><li>进入编辑模式</li></ul><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>i, I</td><td>插入模式（Insert mode）: i为从当前光标所在处插入, I为从本行第一个非空白字符处插入（常用）</td></tr><tr><td>a, A</td><td>插入模式（Insert mode）: a为从当前光标的下一个字符处插入, A为本行最后一个字符处插入（常用）</td></tr><tr><td>o, O</td><td>插入模式（Insert mode）: o为从当前行的下一行插入新的一行, O为从当前行的上一行插入新的一行（常用）</td></tr><tr><td>r, R</td><td>取代模式（Replacemode）: r只会取代光标所在的那一个字符一次, R会一直取代光标所在的文字，直到按下 ESC 为止（常用）</td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到命令模式中（常用）</td></tr></tbody></table><ul><li>命令行模式</li></ul><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>:w</td><td>存盘（常用）</td></tr><tr><td>:w!</td><td>若文件属性为“只读”时，强制写入该文件。</td></tr><tr><td>:q</td><td>离开 vi （常用）</td></tr><tr><td>:q!</td><td>强制离开(改动过文件). !在vim中通常表示强制</td></tr><tr><td>:wq</td><td>保存退出（常用）</td></tr><tr><td>ZZ</td><td>若文件没有改动，则相当于:q，若文件已经被改动过，则相当于:wq</td></tr><tr><td>:w [filename]</td><td>另存为 filename</td></tr><tr><td>:r [filename]</td><td>将 filename 的内容追加到光标所在行之后</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 行的内容写入 filename</td></tr><tr><td>:! command</td><td>暂时离开 vi 到命令行界面下执行 command 的显示结果！比如<code>! ls /home</code></td></tr><tr><td>:set nu</td><td>显示行号，设置之后，会在每一列的字首显示该列的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr><tr><td>:nohl</td><td>取消高亮</td></tr></tbody></table><h3 id="vim-的块操作"><a href="#vim-的块操作" class="headerlink" title="vim 的块操作"></a>vim 的块操作</h3><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">v</td><td>字符选择</td></tr><tr><td align="center">V</td><td>行选择</td></tr><tr><td align="center">[Ctrl]+v</td><td>区块选择，可用矩形形状选择数据</td></tr><tr><td align="center">y</td><td>将反白的地方复制起来</td></tr><tr><td align="center">d</td><td>将反白的地方删除掉</td></tr><tr><td align="center">p</td><td>将刚刚复制的区块，粘贴在光标所在处</td></tr><tr><td align="center">J</td><td>把所有的行连接起来（变成一行）</td></tr><tr><td align="center">&lt; 或 &gt;</td><td>左右缩进</td></tr><tr><td align="center">&#x3D;</td><td>自动给缩进</td></tr></tbody></table><h3 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h3><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>:n</td><td>编辑下一个文件</td></tr><tr><td>:N</td><td>编辑上一个文件</td></tr><tr><td>:files</td><td>列出目前这个 vim 的打开的所有文件</td></tr></tbody></table><h3 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h3><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>:sp(split) [filename]</td><td>创建分屏 (:vsp创建垂直分屏)</td></tr><tr><td>[Ctrl]+ 方向</td><td>dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。</td></tr><tr><td>[Ctrl]+ w + _ (或 [Ctrl] + w + |)</td><td>竖直方向最大化尺寸 ([Ctrl] + w + |为 水平方向最大化)</td></tr><tr><td>[Ctrl]+ w + + (或 [Ctrl]+ w + -)</td><td>调整尺寸</td></tr><tr><td>[Ctrl]+ w + q</td><td>离开当前窗口</td></tr></tbody></table><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><h3 id="管道命令"><a href="#管道命令" class="headerlink" title="管道命令"></a>管道命令</h3><h4 id="选取命令"><a href="#选取命令" class="headerlink" title="选取命令"></a>选取命令</h4><ul><li>cut</li></ul><blockquote><p>cut以行为单位</p></blockquote><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-rq80shl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-rq80shl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ cut -d &#x27;分隔字符&#x27; -f fieldnumber &lt;==用于有特定分隔字符<br>[dmtsai@study ~]$ cut -c 字符区间 &lt;==用于排列整齐的讯息<br>选项与参数: <br>-d : 后面接分隔字符。与 -f 一起使用；<br>-f : 依据 -d 的分隔字符将一段讯息分区成为数段，用 -f 取出第几段的意思；<br>-c : 以字符 （characters） 的单位取出固定字符区间,比如 cut -c 12-20 或cut -c 12- 意味着取出第12个到第20个字符(第12个之后所有字符)<br></code></pre></td></tr></table></div></figure><ul><li>grep 查询满足条件的行</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-2peym6l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-2peym6l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ grep [-acinvAB] [--color=auto] &#x27;查询内容&#x27; filename<br>选项与参数: <br>-a : 将 binary 文件以 text 文件的方式搜寻数据<br>-c : 计算找到 &#x27;查询内容&#x27; 的次数<br>-i : 忽略大小写的不同，所以大小写视为相同<br>-n : 顺便输出行号<br>-v : 反向选择，亦即显示出没有 &#x27;查询内容&#x27; 内容的那一行<br>-A&lt;num&gt;: 意为 after ，除了列出该行外，后续的 n 行也列出来；<br>-B&lt;num&gt;: 意为 befer ，除了列出该行外，前面的 n 行也列出来；<br>-E : 将样式为延伸的正则表达式来使用。也可写为egrep<br>--color=auto : 将找到的关键字部分加上颜色,默认alias已支持<br></code></pre></td></tr></table></div></figure><h4 id="排序命令"><a href="#排序命令" class="headerlink" title="排序命令"></a>排序命令</h4><ul><li>sort 排序</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-1kb5vsl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-1kb5vsl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ sort [-bcdfimMnr][-o&lt;输出文件&gt;][-t&lt;分隔字符&gt;][+&lt;起始栏位&gt;-&lt;结束栏位&gt;][--help][--verison][文件][-k field1[,field2]]<br>选项与参数: <br>-f :忽略大小写的差异<br>-b :忽略最前面的空白字符部分<br>-n :使用 数值大小 进行排序（默认是以字符串排序）<br>-m : 将几个排序好的文件进行合并<br>-r :反向排序<br>-u :就是 uniq ,去重<br>-t&lt;分隔字符&gt; : 分隔符号，默认以 [tab] 键来分隔<br>+&lt;起始栏位&gt;-&lt;结束栏位&gt; : 以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。<br>[-k field1[,field2]] : 按指定的列进行排序,注意是从1开始<br></code></pre></td></tr></table></div></figure><ul><li>wc 计算输出内容的各项数据</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-ijqlkol78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-ijqlkol78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ wc [-lwm]<br>选项与参数: <br>-l : 仅列出行；<br>-w : 仅列出多少字（英文单字）；<br>-m : 多少字符；<br></code></pre></td></tr></table></div></figure><ul><li>uniq 去重</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-ym6yhtl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-ym6yhtl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ uniq [-ic]<br>选项与参数: <br>-i : 忽略大小写字符的不同；<br>-c : 进行计数<br></code></pre></td></tr></table></div></figure><h4 id="数据流处理-tee"><a href="#数据流处理-tee" class="headerlink" title="数据流处理 tee"></a>数据流处理 tee</h4><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-p5r74gl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-p5r74gl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ tee [-a] file...<br>选项与参数: <br>-a : 追加<br></code></pre></td></tr></table></div></figure><h4 id="字符处理"><a href="#字符处理" class="headerlink" title="字符处理"></a>字符处理</h4><ul><li>tr 用于转换或删除文件中的字符</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-5ctdisl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-5ctdisl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ tr [-ds] SET1 ...<br>选项与参数: <br>-d : 删除 SET1 这个字符串<br>-s : 缩减连续重复的字符成指定的单个字符<br><br>示例: 将输出流中小写字母转为大写<br>[dmtsai@study ~]$ cat testfile |tr a-z A-Z <br>或<br>[dmtsai@study ~]$ cat testfile |tr [:lower:] [:upper:] <br></code></pre></td></tr></table></div></figure><ul><li>col 用于过滤控制字符</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-z91pw0l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-z91pw0l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ col [-xb]<br>选项与参数: <br>-x :将 tab 键转换成对等的空格键<br>-b :过滤掉所有的控制字符，包括RLF和HRLF。<br></code></pre></td></tr></table></div></figure><ul><li>join 用于将两个文件中，指定栏位内容相同的行连接起来。</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-wfr4dtl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-wfr4dtl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ join [-ti12] file1 file2<br>选项与参数: <br>-t &lt;字符&gt; : 使用&lt;字符&gt;分隔字符。<br>-i : 忽略大小写的差异；<br>-1 &lt;栏位&gt; : 连接[文件1]指定的栏位。<br>-2 &lt;栏位&gt; : 连接[文件2]指定的栏位。<br></code></pre></td></tr></table></div></figure><ul><li>paste 用于合并文件的列。</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-m2hm10l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-m2hm10l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ paste [-d] file1 file2<br>选项与参数: <br>-d &lt;间隔字符&gt;: 默认是以 [tab] 来分隔的！<br>- : 如果 file 部分写成 - ，表示使用来自 standard input 的数据。<br></code></pre></td></tr></table></div></figure><ul><li>expand 将 [tab] 按键转成空格键</li></ul><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-xx3xn0l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-xx3xn0l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ expand [-t] file<br>选项与参数: <br>-t num: 默认 [tab] 相当于 8 个空格键。<br></code></pre></td></tr></table></div></figure><h4 id="文件分割-split"><a href="#文件分割-split" class="headerlink" title="文件分割 split"></a>文件分割 split</h4><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-d3jb3gl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-d3jb3gl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ split [-bl] file PREFIX<br>选项与参数: <br>-b &lt;字节&gt;: 后面可接欲分区成的文件大小，可加单位，例如 b, k, m 等<br>-l &lt;行数&gt;: 以行数来进行分区,也可以直接写-&lt;行数&gt;<br>PREFIX : 设置切割后文件的前置文件名， split会自动在前置文件名后再加上编号<br></code></pre></td></tr></table></div></figure><h4 id="参数处理-xargs"><a href="#参数处理-xargs" class="headerlink" title="参数处理 xargs"></a>参数处理 xargs</h4><blockquote><p>xargs（英文全拼:  eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。<br>xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。<br>xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。<br>xargs 默认的命令是 echo，这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，<strong>换行和空白将被空格取代</strong>。<br>xargs 是一个强有力的命令，它能够捕获一个命令的输出，然后传递给另外一个命令。<br>之所以能用到这个命令，关键是由于很多命令不支持|管道来传递参数，而日常工作中有有这个必要，所以就有了 xargs 命令，例如: </p></blockquote><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-c5qp96l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-c5qp96l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">find /sbin -perm +700 |ls -l       #这个命令是错误的<br>find /sbin -perm +700 |xargs ls -l   #这样才是正确的<br></code></pre></td></tr></table></div></figure><p>命令格式:</p><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-zf023dl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-zf023dl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ xargs [-a0epn] command<br>选项与参数: <br>-a :file 从文件中读入作为 stdin<br>-0 :如果输入的 stdin 含有特殊字符，例如 \`, \, 空格等等字符时，这个 -0 参数可以将他还原成一般字符。<br>-e &lt;str&gt; :表示以&lt;str&gt;为 EOF （end of file）。当 xargs 分析到&lt;str&gt;时就会停止<br>-p :当每次执行一个argument的时候询问一次用户。<br>-n&lt;num&gt; :后面接次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。<br>当 xargs 后面没有接任何的命令时，默认是以 echo 来进行输出<br></code></pre></td></tr></table></div></figure><h2 id="正则表达式与文件格式化处理"><a href="#正则表达式与文件格式化处理" class="headerlink" title="正则表达式与文件格式化处理"></a>正则表达式与文件格式化处理</h2><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><table><thead><tr><th align="left">特殊符号</th><th>代表意义</th></tr></thead><tbody><tr><td align="left"><strong>[:alnum:]</strong></td><td>英文字母及数字，亦即 0-9, A-Z, a-z</td></tr><tr><td align="left"><strong>[:alpha:]</strong></td><td>英文字母，亦即 A-Z, a-z</td></tr><tr><td align="left">[:blank:]</td><td>代表空格与 [Tab] 两者</td></tr><tr><td align="left">[:cntrl:]</td><td>控制字符，亦即包括 CR, LF, Tab, Del.. 等等</td></tr><tr><td align="left"><strong>[:digit:]</strong></td><td>数字，亦即 0-9</td></tr><tr><td align="left">[:graph:]</td><td>除了空白字符 （空格与 [Tab]） 外的其他所有按键</td></tr><tr><td align="left"><strong>[:lower:]</strong></td><td>小写字母，亦即 a-z</td></tr><tr><td align="left"><strong>[:upper:]</strong></td><td>大写字母，亦即 A-Z</td></tr><tr><td align="left">[:print:]</td><td>代表任何可以被打印出来的字符</td></tr><tr><td align="left">[:punct:]</td><td>代表标点符号 （punctuation symbol），亦即: “ ‘ ? ! ; : # $…</td></tr><tr><td align="left">[:space:]</td><td>任何会产生空白的字符，包括空格键, [Tab], CR 等等</td></tr><tr><td align="left">[:xdigit:]</td><td>16 进制的数字类型，包括:  0-9, A-F, a-f 的数字与字符</td></tr></tbody></table><h3 id="延申型正则表达式"><a href="#延申型正则表达式" class="headerlink" title="延申型正则表达式"></a>延申型正则表达式</h3><table><thead><tr><th align="center">RE字符</th><th>意义</th></tr></thead><tbody><tr><td align="center">+</td><td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。例: &gt; egrep -n ‘go+d’ regular_express.txt</td></tr><tr><td align="center">?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。 &gt; egrep -n ‘go?d’ regular_express.txt</td></tr><tr><td align="center">|</td><td>用或（ or ）的方式进行匹配 如 &gt; egrep -n ‘gd&amp;#124;good’ regular_express.txt &gt; egrep -n ‘gd&amp;#124;good&amp;#124;dog’ regular_express.txt</td></tr><tr><td align="center">()</td><td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用.如 &gt; egrep -n ‘g（la&amp;#124;oo）d’ regular_express.txt</td></tr><tr><td align="center">() +</td><td>多个重复子表达式的判别 例: &gt; echo ‘AxyzxyzxyzxyzC’ &amp;#124; egrep ‘A（xyz）+C’</td></tr></tbody></table><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><blockquote><p>sed 会根据脚本命令来处理文本文件中的数据，这些命令要么从命令行中输入，要么存储在一个文本文件中，此命令执行数据的顺序如下：</p><ol><li>每次仅读取一行内容；</li><li>根据提供的规则命令匹配并修改数据。注意，sed 默认不会直接修改源文件数据，而是会将数据复制到缓冲区中，修改也仅限于缓冲区中的数据；</li><li>将执行结果输出。</li></ol><p>当一行数据匹配完成后，它会继续读取下一行数据，并重复这个过程，直到将文件中所有数据处理完毕。</p></blockquote><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-qyfkitl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-qyfkitl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-9-centos ~]$ sed [-nefr] [动作]<br>选项与参数: <br>-n : 安静（silent）模式。仅显示script处理后的结果。注:在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到屏幕上。<br>-e&lt;script&gt;或--expression=&lt;script&gt;  : 以选项中指定的script来处理输入的文本文件。<br>-f&lt;script文件&gt;或--file=&lt;script文件&gt; : 以选项中指定的script文件来处理输入的文本文件。<br>-r : sed 的动作支持的是延伸型正则表达式的语法。（默认是基础正则表达式语法）<br>-i : 直接修改源文件，而不是由屏幕输出。慎用<br>动作说明:  [n1[,n2]]function也可为[address]function,一般加单引号<br>n1, n2 : 表示 进行动作的行数,比如如果我的动作是需要在 10 到 20 行之间进行的，则“ 10,20[动作行为] ”<br>function : <br>a [str]: 新增, a 后可接字符串,表示在指定行的后面附加一行<br>c [str]: 取代, c 后可接字符串,表示以str取代n1-n2之前的行<br>d : 删除, 后面不接字符,比如&#x27;2,5d&#x27;,意为删除2-5行<br>i [str]: 插入, i 后可接字符串，表示在指定行的前面插入一行<br>r filename: 于指定位置插入文件数据,基本格式为r filename<br>p : 打印,亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行<br>y : 替换单个字符,基本格式为 y/inchars/outchars/ ,默认转换所有字符<br>s : 替换,通常搭配正则表达式使用,其基本格式为s/pattern/replacement/flags<br></code></pre></td></tr></table></div></figure><table><thead><tr><th align="center">flags</th><th>功能</th></tr></thead><tbody><tr><td align="center">n</td><td>1~512 之间的数字，表示指定要替换的字符串出现第几次时才进行替换，例如，一行中有 3 个 A，但用户只想替换第二个 A，这是就用到这个标记；</td></tr><tr><td align="center">g</td><td>对数据中所有匹配到的内容进行替换，如果没有 g，则只会在第一次匹配成功时做替换操作。例如，一行数据中有 3 个 A，则只会替换第一个 A；</td></tr><tr><td align="center">p</td><td>会打印与替换命令中指定的模式匹配的行。此标记通常与 -n 选项一起使用。</td></tr><tr><td align="center">w file</td><td>将缓冲区中的内容写到指定的 file 文件中；</td></tr><tr><td align="center">&amp;</td><td>用正则表达式匹配的内容进行替换；</td></tr><tr><td align="center">\n</td><td>匹配第 n 个子串，该子串之前在 pattern 中用 () 指定。</td></tr><tr><td align="center">\</td><td>转义（转义替换部分包含: &amp;、\ 等）。</td></tr></tbody></table><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><blockquote><p>和 sed 命令类似，awk 命令也是逐行扫描文件（从第 1 行到最后一行），寻找含有目标文本的行，如果匹配成功，则会在该行上执行用户想要的操作；反之，则不对行做任何处理。</p></blockquote><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-2jdp8ol78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-2jdp8ol78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ awk [options] &#x27;scripts...&#x27; filename<br>选项与参数:<br>-F fs: 指定以 fs 作为输入行的分隔符，awk 命令默认分隔符为空格或制表符。<br>-f file: 从脚本文件中读取 awk 脚本指令，以取代直接在命令行中输入指令。<br>-v var=val: 在执行处理过程之前，设置一个变量 var，并给其设备初始值为 val。<br>scripts说明:脚本命令由2部分组成:&#x27;匹配规则&#123;执行命令&#125;&#x27;,且可以同时执行多个脚本命令.整个脚本命令由&#x27;&#x27;括起来,其中的执行命令部分用&#123;&#125;括起来<br></code></pre></td></tr></table></div></figure><blockquote><p>在 awk 程序执行时，如果没有指定执行命令，则默认会把匹配的行输出；<br>如果不指定匹配规则，则默认匹配文本中所有的行。</p></blockquote><h4 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h4><p>默认情况下, awk 会将如下变量分配给它在文本<strong>行</strong>中发现的数据字段:</p><ul><li>$0 代表整个文本行</li><li>$1 代表文本行中的第 1 个数据字段</li><li>$2 代表文本行中的第 2 个数据字段</li><li>$n 代表文本行中的第 n 个数据字段<br>注意:操作对象是行<br>例:<figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-u2g7cbl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-u2g7cbl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]$ cat data2.txt<br>One line of test text.<br>Two lines of test text.<br>Three lines of test text.<br>[root@localhost ~]$ awk &#x27;&#123;print $1&#125;&#x27; data2.txt<br>One<br>Two<br>Three<br></code></pre></td></tr></table></div></figure></li></ul><h4 id="多命令"><a href="#多命令" class="headerlink" title="多命令"></a>多命令</h4><p>awk 允许将多条命令组合成一个正常的程序。要在命令行上的程序脚本中使用多条命令，只要在命令之间放个分号即可，例如：</p><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-pg84d2l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-pg84d2l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]$ echo &quot;My name is Rich&quot; | awk &#x27;&#123;$4=&quot;Christine&quot;; print $0&#125;&#x27;<br>My name is Christine<br></code></pre></td></tr></table></div></figure><p>除此之外，也可以一次一行地输入程序脚本命令，比如说：</p><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-n9uzh8l78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-n9uzh8l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]$ awk &#x27;&#123;<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-variable">$4</span>=<span class="hljs-string">&quot;Christine&quot;</span></span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">print</span> <span class="hljs-variable">$0</span>&#125;<span class="hljs-string">&#x27;</span></span><br>My name is Rich<br>My name is Christine<br></code></pre></td></tr></table></div></figure><h4 id="BEGIN-及-END-关键字"><a href="#BEGIN-及-END-关键字" class="headerlink" title="BEGIN 及 END 关键字"></a>BEGIN 及 END 关键字</h4><p>awk可以指定脚本命令的运行时机:</p><ul><li>BEGIN 关键字允许我们在处理数据前运行一些脚本命令</li><li>END 关键字允许我们处理数据后允许一些脚本命令</li></ul><p>例:</p><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-1rx3utl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-1rx3utl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]$ cat data3.txt<br>Line 1<br>Line 2<br>Line 3<br><br>[root@localhost ~]$ awk &#x27;BEGIN &#123;print &quot;The data3 File Contents:&quot;&#125;<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$0</span>&#125;<span class="hljs-string">&#x27; data3.txt</span></span><br>The data3 File Contents:<br>Line 1<br>Line 2<br>Line 3<br><br>[root@localhost ~]$ awk &#x27;BEGIN &#123;print &quot;The data3 File Contents:&quot;&#125;<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-string">&#123;print $0&#125;</span></span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-string">END &#123;print &quot;End of File&quot;&#125;&#x27;</span> data3.txt</span><br>The data3 File Contents:<br>Line 1<br>Line 2<br>Line 3<br>End of File<br></code></pre></td></tr></table></div></figure><h4 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h4><p>awk内置一些变量用于获取文件信息</p><table><thead><tr><th align="center">变量名称</th><th>代表意义</th></tr></thead><tbody><tr><td align="center">NF</td><td>每一行 （$0） 拥有的字段总数</td></tr><tr><td align="center">NR</td><td>目前 awk 所处理的是“第几行”数据</td></tr><tr><td align="center">FS</td><td>目前的分隔字符，默认是空格键</td></tr><tr><td align="center">ARGC</td><td>命令行参数个数</td></tr><tr><td align="center">ARGV</td><td>命令行参数排列</td></tr><tr><td align="center">ENVIRON</td><td>支持队列中系统环境变量的使用</td></tr><tr><td align="center">FILENAME</td><td>awk浏览的文件名</td></tr><tr><td align="center">FNR</td><td>浏览文件的记录数</td></tr><tr><td align="center">OFS</td><td>输出域分隔符</td></tr><tr><td align="center">ORS</td><td>输出记录分隔符</td></tr><tr><td align="center">RS</td><td>控制记录分隔符</td></tr><tr><td align="center">例:</td><td></td></tr></tbody></table><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-zic48xl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-zic48xl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ last -n 5 | awk &#x27;&#123;print $1 &quot;\t lines: &quot; NR &quot;\t column_number: &quot; NF&#125;&#x27;<br>dmtsai lines: 1 column_number: 10<br>dmtsai lines: 2 column_number: 10<br>dmtsai lines: 3 column_number: 10<br>dmtsai lines: 4 column_number: 10<br>dmtsai lines: 5 column_number: 9<br></code></pre></td></tr></table></div></figure><p>除了awk的内置变量，awk还可以自定义变量。比如:</p><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-kyvd3gl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-kyvd3gl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[dmtsai@study ~]$ awk &#x27;&#123;count++;print $0;&#125; END&#123;print &quot;user count is &quot;, count&#125;&#x27; /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>......<br>user count is  40<br><br>[dmtsai@study ~]$ awk &#x27;BEGIN &#123;count=0;print &quot;[start]user count is &quot;, count&#125; &#123;count=count+1;print $0;&#125; END&#123;print &quot;[end]user count is &quot;, count&#125;&#x27; /etc/passwd<br>[start]user count is  0<br>root:x:0:0:root:/root:/bin/bash<br>...<br>[end]user count is  40<br></code></pre></td></tr></table></div></figure><h4 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h4><p>awk的匹配规则可以使用条件语句,循环语句</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bwapp通关之A1-Injection</title>
    <link href="/2022/08/01/bwapp%E9%80%9A%E5%85%B3%E4%B9%8BA1-Injection/"/>
    <url>/2022/08/01/bwapp%E9%80%9A%E5%85%B3%E4%B9%8BA1-Injection/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML-Injection-Reflected-GET"><a href="#HTML-Injection-Reflected-GET" class="headerlink" title="HTML Injection - Reflected(GET)"></a>HTML Injection - Reflected(GET)</h1><h2 id="low-级别"><a href="#low-级别" class="headerlink" title="low 级别"></a>low 级别</h2><p>low级别意味着没有任何检查<br>输入<code>&lt;h1&gt;This is a test&lt;/h1&gt;</code>，可以看到可以被完整解析到页面上<br><img src="https://i.imgur.com/A9iGfgJ.png"></p><p>输入<code>&lt;meta http-equiv=&quot;refresh&quot; content=&#39;0; url=https://xxx:xxx/portal.php</code><br><img src="https://i.imgur.com/Ao8E5ic.png"></p><h2 id="medium-级别"><a href="#medium-级别" class="headerlink" title="medium 级别"></a>medium 级别</h2><p>进行和low级别相同操作<br><img src="https://i.imgur.com/VbjtMEA.png"></p><p>发现无法注入成功<br>抓包可见cookie值有变化</p><p><img src="https://i.imgur.com/quGGiYz.png"></p><p><img src="https://i.imgur.com/FRKq9XX.png"></p><p>查看源码app&#x2F;htmli_get.php</p><p><img src="https://i.imgur.com/E4MkkpO.png"></p><p>进一步找到xss_check_1,在app&#x2F;functions_external.php中<br><img src="https://i.imgur.com/vtSeVJo.png"></p><p>可以看出medium级别的检查是先将输入的&lt;&gt;转为html字符实体&amp;lt和&amp;gt<br>然后对输入解码<br>这里可以看到bwapp提供了三个例子</p><p><code>&lt;script&gt;alert(0)&lt;/script&gt;</code><br><code>%3Cscript%3Ealert%280%29%3C%2Fscript%3E</code> &#x2F;&#x2F;这是对<code>&lt;script&gt;alert(0)&lt;/script&gt;</code>的一次编码<br><code>%253Cscript%253Ealert%25280%2529%253C%252Fscript%253E</code> &#x2F;&#x2F;这是对<code>&lt;script&gt;alert(0)&lt;/script&gt;</code>的二次编码</p><p>不难得出解决办法是输入编码后的代码<br>这里就不放图了</p><h2 id="high-级别"><a href="#high-级别" class="headerlink" title="high 级别"></a>high 级别</h2><p>运行和medium相同操作,也是无法注入成功,查看代码<br>发现是带有ENT_QUOTES参数的htmlspecialchars()函数,<br>暂时没想到办法<br><img src="https://i.imgur.com/9QZnrY9.png"></p><h1 id="HTML-Injection-Reflected-POST"><a href="#HTML-Injection-Reflected-POST" class="headerlink" title="HTML Injection - Reflected(POST)"></a>HTML Injection - Reflected(POST)</h1><p>同GET方式</p><h1 id="HTML-Injection-Reflected-URL"><a href="#HTML-Injection-Reflected-URL" class="headerlink" title="HTML Injection - Reflected (URL)"></a>HTML Injection - Reflected (URL)</h1><h2 id="low-级别-1"><a href="#low-级别-1" class="headerlink" title="low 级别"></a>low 级别</h2><p>抓包如图示,将编码部分更改即可<br><img src="https://i.imgur.com/cxNSH0x.png"><br><img src="https://i.imgur.com/v8SJIPz.png"></p><p>根据源码<br><img src="https://i.imgur.com/fPFU8hI.png"></p><p>也可以更改host<br><img src="https://i.imgur.com/QysdV76.png"></p><h2 id="medium-级别-1"><a href="#medium-级别-1" class="headerlink" title="medium 级别"></a>medium 级别</h2><p>该问题似乎是在 Javascript 中运行的 DOM XSS 中的一个漏洞.<br>它已在最近的浏览器中得到处理。现在的浏览器可以对URL中的&lt;&gt;字符进行编码,从而导致攻击失败.<br>可以在老版本的IE中实现进攻.</p><h2 id="high-级别-1"><a href="#high-级别-1" class="headerlink" title="high 级别"></a>high 级别</h2><p>可以从源码看到再次使用了带有ENT_QUOTES参数的htmlspecialchars()函数,不可绕过.</p><h1 id="HTML-Injection-Stored-Blog"><a href="#HTML-Injection-Stored-Blog" class="headerlink" title="HTML Injection - Stored (Blog)"></a>HTML Injection - Stored (Blog)</h1><h2 id="low-级别-2"><a href="#low-级别-2" class="headerlink" title="low 级别"></a>low 级别</h2><p>直接尝试注入，可行<br><img src="https://i.imgur.com/RBcI4bt.png"></p><h2 id="medium-amp-high-级别"><a href="#medium-amp-high-级别" class="headerlink" title="medium&amp;high 级别"></a>medium&amp;high 级别</h2><p>尝试注入,发现没有被解析<br><img src="https://i.imgur.com/n1WdAd6.png"></p><p>查看源码 app&#x2F;htmli_stored.php</p><figure class="highlight php"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-689q3il78sa23j"></i><span>php</span><div class="collapse show" id="collapse-689q3il78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">htmli</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;connect_i.php&quot;</span>);<br><br>    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;security_level&quot;</span>])<br>    &#123;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0&quot;</span> :<br><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">sqli_check_3</span>(<span class="hljs-variable">$link</span>, <span class="hljs-variable">$data</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span> :<br><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">sqli_check_3</span>(<span class="hljs-variable">$link</span>, <span class="hljs-variable">$data</span>);<br>            <span class="hljs-comment">// $data = xss_check_4($data);</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span> :<br><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">sqli_check_3</span>(<span class="hljs-variable">$link</span>, <span class="hljs-variable">$data</span>);<br>            <span class="hljs-comment">// $data = xss_check_3($data);</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span> :<br><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">sqli_check_3</span>(<span class="hljs-variable">$link</span>, <span class="hljs-variable">$data</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><img src="https://i.imgur.com/65DZ2S5.png"></p><figure class="highlight php"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-8j0hy7l78sa23j"></i><span>php</span><div class="collapse show" id="collapse-8j0hy7l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// app/functions_external.php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xss_check_3</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>, <span class="hljs-variable">$encoding</span> = <span class="hljs-string">&quot;UTF-8&quot;</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-comment">// htmlspecialchars - converts special characters to HTML entities    </span><br>    <span class="hljs-comment">// &#x27;&amp;&#x27; (ampersand) becomes &#x27;&amp;amp;&#x27; </span><br>    <span class="hljs-comment">// &#x27;&quot;&#x27; (double quote) becomes &#x27;&amp;quot;&#x27; when ENT_NOQUOTES is not set</span><br>    <span class="hljs-comment">// &quot;&#x27;&quot; (single quote) becomes &#x27;&amp;#039;&#x27; (or &amp;apos;) only when ENT_QUOTES is set</span><br>    <span class="hljs-comment">// &#x27;&lt;&#x27; (less than) becomes &#x27;&amp;lt;&#x27;</span><br>    <span class="hljs-comment">// &#x27;&gt;&#x27; (greater than) becomes &#x27;&amp;gt;&#x27;  </span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$data</span>, ENT_QUOTES, <span class="hljs-variable">$encoding</span>);<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p>发现最终拦路关卡是 htmlspecialchars(),认输.</p><h1 id="iFrame-Injection"><a href="#iFrame-Injection" class="headerlink" title="iFrame Injection"></a>iFrame Injection</h1><blockquote><p>iframe是可用于在HTML页面中嵌入一些文件(如文档，视频等)的一项技术。对iframe最简单的解释就是“iframe是一个可以在当前页面中显示其它页面内容的技术”<br>通过利用iframe标签对网站页面进行注入，是利用了HTML标签，实际上就是一个阅读器，可以阅读通过协议加载的活服务器本地的文件、视频等</p></blockquote><h2 id="low-级别-3"><a href="#low-级别-3" class="headerlink" title="low 级别"></a>low 级别</h2><p><img src="https://i.imgur.com/o4Ucg47.png"></p><p>尝试修改参数,成功<br><img src="https://i.imgur.com/1oR7NZB.png"></p><h2 id="medium-级别-2"><a href="#medium-级别-2" class="headerlink" title="medium 级别"></a>medium 级别</h2><p>尝试low级别相同操作,果然不行<br>查看代码</p><figure class="highlight php"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-bpcejll78sa23j"></i><span>php</span><div class="collapse show" id="collapse-bpcejll78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xss</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;security_level&quot;</span>])<br>    &#123;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0&quot;</span> :<br><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">no_check</span>(<span class="hljs-variable">$data</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span> :<br><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">xss_check_4</span>(<span class="hljs-variable">$data</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span> :<br><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">xss_check_3</span>(<span class="hljs-variable">$data</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span> :<br><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">no_check</span>(<span class="hljs-variable">$data</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;security_level&quot;</span>] == <span class="hljs-string">&quot;1&quot;</span> || <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;security_level&quot;</span>] == <span class="hljs-string">&quot;2&quot;</span>)<br>&#123;<br><br><span class="hljs-meta">?&gt;</span><br>    &lt;iframe frameborder=<span class="hljs-string">&quot;0&quot;</span> src=<span class="hljs-string">&quot;robots.txt&quot;</span> height=<span class="hljs-string">&quot;&lt;?php echo xss(<span class="hljs-subst">$_GET</span>[&quot;</span>ParamHeight<span class="hljs-string">&quot;])?&gt;&quot;</span> width=<span class="hljs-string">&quot;&lt;?php echo xss(<span class="hljs-subst">$_GET</span>[&quot;</span>ParamWidth<span class="hljs-string">&quot;])?&gt;&quot;</span>&gt;&lt;/iframe&gt;<br><span class="hljs-meta">&lt;?php</span><br><br>&#125;<br><br><span class="hljs-keyword">else</span><br>&#123;<br><br><span class="hljs-meta">?&gt;</span><br>    &lt;iframe frameborder=<span class="hljs-string">&quot;0&quot;</span> src=<span class="hljs-string">&quot;&lt;?php echo xss(<span class="hljs-subst">$_GET</span>[&quot;</span>ParamUrl<span class="hljs-string">&quot;])?&gt;&quot;</span> height=<span class="hljs-string">&quot;&lt;?php echo xss(<span class="hljs-subst">$_GET</span>[&quot;</span>ParamHeight<span class="hljs-string">&quot;])?&gt;&quot;</span> width=<span class="hljs-string">&quot;&lt;?php echo xss(<span class="hljs-subst">$_GET</span>[&quot;</span>ParamWidth<span class="hljs-string">&quot;])?&gt;&quot;</span>&gt;&lt;/iframe&gt;<br><span class="hljs-meta">&lt;?php</span><br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xss_check_4</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-comment">// addslashes - returns a string with backslashes before characters that need to be quoted in database queries etc.</span><br>    <span class="hljs-comment">// These characters are single quote (&#x27;), double quote (&quot;), backslash (\) and NUL (the NULL byte).</span><br>    <span class="hljs-comment">// Do NOT use this for XSS or HTML validations!!!</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$data</span>);<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p>可以看到检测手法是addslashes()函数,而在iframe标签里,最后面的元素是ParamWidth,所以可以在宽度后附上payload,如图:<br><img src="https://i.imgur.com/IVX5T18.png"></p><h2 id="high-级别-2"><a href="#high-级别-2" class="headerlink" title="high 级别"></a>high 级别</h2><p>老样子, htmlspecialchars()函数</p><h1 id="LDAP-Connection-Settings"><a href="#LDAP-Connection-Settings" class="headerlink" title="LDAP Connection Settings"></a>LDAP Connection Settings</h1><blockquote><p>LDAP Lightweight Directory Access Protocol 轻量级目录访问协议</p></blockquote><p>因为要安装环境，暂时略过</p><h1 id="Mail-Header-Injection-SMTP"><a href="#Mail-Header-Injection-SMTP" class="headerlink" title="Mail Header Injection (SMTP)"></a>Mail Header Injection (SMTP)</h1><blockquote><p>注入原理:<br>邮件的结构,分为信封(MAIL FROM,RCPT TO),头部(From,To,Subject,CC,BCC等),主体(message),mail header injection,即针对头部的注入.使用telnet对25端口进行手工发邮件的过程的事后会发现，对于邮件头部的字段其实就是换行符0x0A或者0x0D0x0A分割,即\n或\r\n,所以就可以注入了.</p></blockquote><p>由于bwapp邮件服务没设置好,这里也不演示了</p><h1 id="OS-Command-Injection"><a href="#OS-Command-Injection" class="headerlink" title="OS Command Injection"></a>OS Command Injection</h1><h2 id="low-级别-4"><a href="#low-级别-4" class="headerlink" title="low 级别"></a>low 级别</h2><p>思路就是输入不止一条命令<br>可以用 <strong>;</strong>,可以用  <strong>&amp;</strong>,也可以用 <strong>|</strong><br><img src="https://i.imgur.com/0vmDfGf.png">  </p><p>另外,如果没有回显,可能是你的环境不支持nslookup命令</p><h2 id="medium-级别-3"><a href="#medium-级别-3" class="headerlink" title="medium 级别"></a>medium 级别</h2><p>同 low 级别思路,发现只有 <strong>|</strong> 可以用.<br>查看代码<br><img src="https://i.imgur.com/IbGQsMs.png"><br><img src="https://i.imgur.com/NuAvnhU.png"></p><p>可以看到 <code>commandi_check_1()</code> 把 <code>&amp;</code> 和 <code>;</code>替换了.</p><h2 id="high-级别-3"><a href="#high-级别-3" class="headerlink" title="high 级别"></a>high 级别</h2><p><code>escapeshellcmd()</code>确保用户只执行一个命令<br>暂时无法注入</p><h1 id="OS-Command-lnjection-Blind"><a href="#OS-Command-lnjection-Blind" class="headerlink" title="OS Command lnjection - Blind"></a>OS Command lnjection - Blind</h1><h2 id="low-级别-5"><a href="#low-级别-5" class="headerlink" title="low 级别"></a>low 级别</h2><p>没有回显,通过时间盲注<br><img src="https://i.imgur.com/TSZ4FI2.png"></p><h2 id="medium-级别-4"><a href="#medium-级别-4" class="headerlink" title="medium 级别"></a>medium 级别</h2><p>同理，使用管道符即可</p><h1 id="PHP-Code-Injection"><a href="#PHP-Code-Injection" class="headerlink" title="PHP Code Injection"></a>PHP Code Injection</h1><h2 id="low-级别-6"><a href="#low-级别-6" class="headerlink" title="low 级别"></a>low 级别</h2><p>观察发现请求页面的message参数，尝试使用php函数作为参数<br><img src="https://i.imgur.com/rHfwhav.png"><br><img src="https://i.imgur.com/K6pvwzh.png"><br>可以获取&#x2F;etc&#x2F;passwd文件的信息<br>猜测是使用了<code>eval</code>函数且未检查参数</p><h2 id="medium-amp-high-级别-1"><a href="#medium-amp-high-级别-1" class="headerlink" title="medium&amp;high 级别"></a>medium&amp;high 级别</h2><p><img src="https://i.imgur.com/3UDDnN3.png"><br>上图可见移除了<code>eval</code>函数,且使用<code>htmlspecialchars </code>来处理参数</p><h1 id="Server-Side-Includes-SSI-Injection"><a href="#Server-Side-Includes-SSI-Injection" class="headerlink" title="Server-Side Includes (SSI) Injection"></a>Server-Side Includes (SSI) Injection</h1><blockquote><p>SSI是用于向HTML页面提供动态内容的Web应用程序上的指令。 它们与CGI类似，不同之处在于SSI用于在加载当前页面之前或在页面可视化时执行某些操作。 为此，Web服务器在将页面提供给用户之前分析SSI。</p></blockquote><p>SSI基本格式<code>&lt;!-– 指令名称=&quot;指令参数&quot;&gt;</code><br>由于环境不支持,就不演示了</p><h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><h2 id="sql-注入分类"><a href="#sql-注入分类" class="headerlink" title="sql 注入分类"></a>sql 注入分类</h2><p><strong>按照注入点类型分类</strong></p><ul><li>数字型注入点</li><li>字符型注入点</li><li>搜索型注入点</li></ul><p><strong>按照http传递数据的方式分类</strong></p><ul><li>get 注入</li><li>post 注入</li><li>cookie 注入</li><li>http请求头注入</li></ul><p><strong>按照执行效果分类</strong></p><ul><li>基于报错的注入</li><li>布尔类型注入</li><li>时间盲注</li></ul><h2 id="sql-注入的常见方法"><a href="#sql-注入的常见方法" class="headerlink" title="sql 注入的常见方法"></a>sql 注入的常见方法</h2><ul><li>特殊字符<ul><li>比如分号(堆叠注入):<figure class="highlight sql"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-1tma70l78sa23j"></i><span>sql</span><div class="collapse show" id="collapse-1tma70l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span><br></code></pre></td></tr></table></div></figure></li><li>比如注释符:<figure class="highlight sql"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-p406lfl78sa23j"></i><span>sql</span><div class="collapse show" id="collapse-p406lfl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># sleep(<span class="hljs-number">500</span>)可对系统资源造成极大耗损<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> num <span class="hljs-keyword">from</span> game_score <span class="hljs-keyword">where</span> game_id <span class="hljs-operator">=</span> <span class="hljs-number">244</span> <span class="hljs-keyword">and</span> version <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> sleep(<span class="hljs-number">500</span>)<span class="hljs-comment">-- 注释掉可能对注入造成干扰的语句</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">还有这种注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></div></figure></li><li>比如单引号: <code>1&#39; or &#39;1&#39;=&#39;1</code></li></ul></li><li>针对黑名单过滤<ul><li>sql 语句同义变形体</li><li>双写绕过</li></ul></li><li>针对中间链环节如编码<ul><li>宽字节注入(去掉转义符)</li></ul></li><li>存储型注入,针对后端&#x2F;数据库输入<br>比如:用户名输入<code>admin&#39;#</code></li></ul><h2 id="一般步骤-非盲"><a href="#一般步骤-非盲" class="headerlink" title="一般步骤(非盲)"></a>一般步骤(非盲)</h2><ol><li><p>判断是否存在注入，注入是字符型还是整数型</p></li><li><p>猜解SQL查询语句中的字段数 (order by )</p></li><li><p>确定显示的字段顺序 </p></li><li><p>获取当前数据库 (爆库)</p></li><li><p>获取数据库中的表 (爆表)</p></li><li><p>获取表中的字段名 (爆字段)</p></li><li><p>下载数据 (爆数据)</p></li></ol><h2 id="bwapp-中的-sql-注入"><a href="#bwapp-中的-sql-注入" class="headerlink" title="bwapp 中的 sql 注入"></a>bwapp 中的 sql 注入</h2><h2 id="GET-x2F-Search-amp-amp-GET-x2F-Select"><a href="#GET-x2F-Search-amp-amp-GET-x2F-Select" class="headerlink" title="(GET&#x2F;Search &amp;&amp; GET&#x2F;Select)"></a>(GET&#x2F;Search &amp;&amp; GET&#x2F;Select)</h2><ul><li><strong>low</strong><br>payload: <code>g%&#39; union select 1,database(),3,5,4,6,7 -- </code>  注意有个空格<br><img src="https://i.imgur.com/JBZG0YG.png"><br>或者<code>&#39; and 1=0 union all select 1,table_name, column_name,4,5,6,7 from information_schema.columns where table_schema=&#39;bWAPP&#39;#</code><br><img src="https://i.imgur.com/pdmn4xb.png"></li><li><strong>medium</strong><br>  <img src="https://i.imgur.com/snYzxQx.png"><br>  <img src="https://i.imgur.com/WA2da3P.png"><br>  又是<code>addslashes()</code>函数,此函数的作用是在预定义的字符前加上<code>\</code>进行转义,<br>  预定义字符有<code>&#39;</code>,<code>&quot;</code>,<code>\</code>,NULL<br>  数据库如果是GBK编码可以考虑宽字节注入</li><li><strong>high</strong><br>采用<code>mysql_real_escape_string()</code>函数防御,此函数转义sql语句中的特殊字符,没有想到注入方法</li></ul><h2 id="POST-x2F-Search-amp-POST-x2F-Select"><a href="#POST-x2F-Search-amp-POST-x2F-Select" class="headerlink" title="(POST&#x2F;Search &amp; POST&#x2F;Select)"></a>(POST&#x2F;Search &amp; POST&#x2F;Select)</h2><p>基本和 GET 方式一样,多了一步抓包<br><img src="https://i.imgur.com/LUQGlur.png"></p><h2 id="AJAX-x2F-JSON-x2F-jQuery"><a href="#AJAX-x2F-JSON-x2F-jQuery" class="headerlink" title="(AJAX&#x2F;JSON&#x2F;jQuery)"></a>(AJAX&#x2F;JSON&#x2F;jQuery)</h2><ul><li><strong>low</strong><br>  使用 GET 请求方式输入 url 并不能查询到数据,原因是没有经过页面 JS 的交互,<br>  可以看到禁用了 js 后无论输入什么内容都没有回显<br>  <img src="https://i.imgur.com/k0qFD6V.png"><br>  <img src="https://i.imgur.com/8aF7AQA.png"><br>  <img src="https://i.imgur.com/IJiawfJ.png"><br>  于是查看网页源代码<br>  <img src="https://i.imgur.com/MgUiz8O.png"><br>  可以看到是从<code>sqli_10-2.php</code>获取的 json 数据<br>  同样的,抓包也可以抓到:<br>  <img src="https://i.imgur.com/duTwNvS.png"><br>  于是从<code>sqli_10-2.php</code>注入<br>  <img src="https://i.imgur.com/ShgT94S.png"><br>  接下来和上面一样了</li><li><strong>medium&amp;high</strong><br>同上也是<code>addslashes()</code>与<code>mysql_real_escape_string()</code>防御</li></ul><h2 id="CAPTCHA"><a href="#CAPTCHA" class="headerlink" title="(CAPTCHA)"></a>(CAPTCHA)</h2><p>在注入前需要输入验证码,除此之外和上面没有别的区别</p><h2 id="Login-Form-x2F-Hero"><a href="#Login-Form-x2F-Hero" class="headerlink" title="(Login Form&#x2F;Hero)"></a>(Login Form&#x2F;Hero)</h2><ul><li><p><strong>low</strong><br>先找注入点<br><img src="https://i.imgur.com/SXxK9mR.png"><br>可以 SQL 注入<br>猜测sql语句为</p><figure class="highlight php"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-xsp353l78sa23j"></i><span>php</span><div class="collapse show" id="collapse-xsp353l78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">select * <span class="hljs-keyword">from</span> user where username=<span class="hljs-string">&#x27; $username &#x27;</span><span class="hljs-keyword">and</span> password=<span class="hljs-string">&#x27; $password &#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>于是构造payload为:</p><blockquote><p>用户名: ‘ or 1&#x3D;1#<br>密码: 随义</p></blockquote><p><img src="https://i.imgur.com/xGCy9U8.png"></p></li><li><p><strong>medium&amp;high</strong><br>同上也是<code>addslashes()</code>与<code>mysql_real_escape_string()</code>防御</p></li></ul><h2 id="Login-Form-x2F-User"><a href="#Login-Form-x2F-User" class="headerlink" title="(Login Form&#x2F;User)"></a>(Login Form&#x2F;User)</h2><ul><li><p><strong>low</strong><br>和上面一样的方法,发现并不能注入<br><img src="https://i.imgur.com/BYvzBs8.png"><br>于是从头再来,先试试<code>bee&#39;</code>:<br><img src="https://i.imgur.com/urcjubJ.png"><br>看不到 password 的回显<br>于是多测几次,发现密码无论输入什么,不会对显示有任何影响<br>后续也尝试了一些方法,也不起作用,只能判断出字段数为9<br>于是使用sqlmap<br><img src="https://i.imgur.com/CXelA70.png"><br>成功获得数据库及表名<br><img src="https://i.imgur.com/UB10Ubj.png"><br>接下来查看users表的内容<br><img src="https://i.imgur.com/w7zhDJo.png"><br><img src="https://i.imgur.com/C8Yyej2.png"><br>查看用户名密码<br><img src="https://i.imgur.com/wr9jpJU.png"><br><img src="https://i.imgur.com/Bsk2jtA.png"><br><img src="https://i.imgur.com/ed8N25A.png"></p></li><li><p><strong>medium&amp;high</strong><br>无法注入</p></li></ul><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="(SQLite)"></a>(SQLite)</h2><ul><li><p>SQLite介绍</p><blockquote><p>SQLite含有一张内置表“sqlite_master”,表里存储着type、name、tbl_name、rootpage、sql五个字段。</p></blockquote><table><thead><tr><th>字段</th><th>记录信息</th></tr></thead><tbody><tr><td>type列</td><td>项目的类型，如table、index、view、trigger</td></tr><tr><td>tbl_name</td><td>所从属的表名，如索引所在的表名。对于表来说，该列就是表名本身；</td></tr><tr><td>name</td><td>项目的名称，如表名、索引名等；</td></tr><tr><td>rootpage</td><td>项目在数据库页中存储的编号。对于视图和触发器，该列值为0或者NULL</td></tr><tr><td>sql</td><td>存放着所有表的创建语句，即表的结构。</td></tr></tbody></table></li><li><p><strong>low</strong><br>首先安装php sqlite模块:</p><figure class="highlight shell"><i class="iconfont icon-chevron_down" type="button" data-toggle="collapse" data-target="#collapse-sfixmgl78sa23j"></i><span>shell</span><div class="collapse show" id="collapse-sfixmgl78sa23j"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install sqlite3<br>apt-get install php5-sqlite<br>service apache2 restart<br></code></pre></td></tr></table></div></figure><p>搜索 man,有三个结果,可见为模糊查询<br><img src="https://i.imgur.com/FbhHIsf.png"></p><p>于是尝试注入:<br><img src="https://i.imgur.com/6QKXtqH.png"><br>接下来常规操作:</p><ul><li>判断字段数: <code>%&#39; order by 6 --</code></li><li>判断字段顺序: <code>%&#39; union select 1,2,3,4,5,6 --</code><br><img src="https://i.imgur.com/NE8EKjS.png"></li><li>查表: <code>%&#39; union select 1,sqlite_version(),name,5,4,6 from sqlite_master --</code><br><img src="https://i.imgur.com/OjJjgnm.png"></li><li>查字段: <code>%&#39; union select 1,sqlite_version(),sql,5,4,6 from sqlite_master --</code><br><img src="https://i.imgur.com/hLGOhoT.png"></li><li>取值: <code>%&#39; union select 1,2,login,password,4,6 from users --</code><br><img src="https://i.imgur.com/PHdKKdB.png"></li><li>解密<br><img src="https://i.imgur.com/XS7Vji4.png"></li></ul></li><li><p><strong>medium&amp;high</strong><br>无法注入</p></li></ul><h2 id="Drupal-SQL-Injection-Drupageddon"><a href="#Drupal-SQL-Injection-Drupageddon" class="headerlink" title="Drupal SQL Injection (Drupageddon)"></a>Drupal SQL Injection (Drupageddon)</h2><blockquote><p>CVE-2014-3704<br>Drupal 是一款用量庞大的CMS，其7.0~7.31版本中存在一处无需认证的SQL漏洞。通过该漏洞，攻击者可以执行任意SQL语句，插入、修改管理员信息，甚至执行任意代码。</p></blockquote><h2 id="Stored-Blog"><a href="#Stored-Blog" class="headerlink" title="Stored (Blog)"></a>Stored (Blog)</h2><p>此类 sql 注入语句一般为 insert 或 update 语句 </p><ul><li><p><strong>low</strong><br>首先判断注入点常规使用 <code>xxx&#39;</code>的方式 输入 <code>hack&#39;</code>提交<br><img src="https://i.imgur.com/Ta8rLGE.png"><br>存在注入点,查表: <code>hack&#39;,(select group_concat(table_name) from information_schema.tables where table_schema=database()))#</code><br><img src="https://i.imgur.com/B2UhxdG.png"><br>后面也是常规操作</p></li><li><p><strong>medium</strong><br>尝试xss注入<br><img src="https://i.imgur.com/5kTOiW6.png"><br>查看代码发现是<code>addslashes()</code>,没有对xss进行防御</p></li><li><p><strong>high</strong><br><code>htmlspecialchars()</code>防御,无法注入<br><img src="https://i.imgur.com/cZRRzjU.png"></p></li></ul><h2 id="Stored-SQLite"><a href="#Stored-SQLite" class="headerlink" title="Stored (SQLite)"></a>Stored (SQLite)</h2><p>常规思路</p><h2 id="Stored-User-Agent"><a href="#Stored-User-Agent" class="headerlink" title="Stored(User-Agent)"></a>Stored(User-Agent)</h2><ul><li><p><strong>low</strong></p></li><li><p>利用User-Agent注入<br><img src="https://i.imgur.com/6WMF4rY.png"><br><img src="https://i.imgur.com/rpOw3MW.png"><br>然后思路也是一样</p></li><li><p><strong>medium&amp;high</strong><br><code>addslashes()</code>与<code>mysql_real_escape_string()</code>防御,未发现注入方法</p></li></ul><h2 id="Stored-XML"><a href="#Stored-XML" class="headerlink" title="Stored (XML)"></a>Stored (XML)</h2><ul><li><p><strong>low</strong><br>抓包可见请求发送给sqli_8-2.php<br><img src="https://i.imgur.com/pAmBe7B.png"><br><img src="https://i.imgur.com/dfKkb1Z.png"><br>尝试对POST体做注入点判断<br><img src="https://i.imgur.com/yK85br3.png"><br>存在注入点,然后尝试常规方法判断字段数,发现无法判断,考虑非<code>select</code>语句,结合reset这个单词,猜测为<code>update</code>语句,尝试报错注入<br>这里我们尝试用<code>updatexml()</code> 方法来注入,依旧是常规思路:库-表-字段-数据<br><img src="https://i.imgur.com/2hf2pK9.png"><br><img src="https://i.imgur.com/SO4qGJ2.png"><br><img src="https://i.imgur.com/UmkInfE.png"><br><img src="https://i.imgur.com/vLtSpgv.png"><br><img src="https://i.imgur.com/SLquFVD.png"><br>大体思路如上</p></li><li><p><strong>medium&amp;high</strong><br>这里的 login 直接取了session的登录名,无法注入<br><img src="https://i.imgur.com/lKAODF9.png"></p></li></ul><h2 id="Boolean-Based"><a href="#Boolean-Based" class="headerlink" title="Boolean-Based"></a>Boolean-Based</h2><ul><li><p><strong>low</strong><br>判断是否是模糊查询,结果是字符串精准匹配<br><img src="https://i.imgur.com/Z486jjN.png"><br><img src="https://i.imgur.com/N6mh2Bv.png"><br>然后就是手工盲注<br><img src="https://i.imgur.com/dlOpvRa.png"><br>不详细展开</p></li><li><p><strong>medium&amp;high</strong><br>无法注入,原因和之前一样<br><img src="https://i.imgur.com/5hzFkpM.png"></p></li></ul><h2 id="Blind-Time-Based"><a href="#Blind-Time-Based" class="headerlink" title="Blind - Time-Based"></a>Blind - Time-Based</h2><ul><li><strong>low</strong><br><img src="https://i.imgur.com/6JsEbpj.png"><br>时间盲注,建议sqlmap或者自行编写脚本跑</li><li><strong>medium&amp;high</strong></li><li>无法注入<br>同上也是<code>addslashes()</code>与<code>mysql_real_escape_string()</code>防御</li></ul><h2 id="Blind-SQLite"><a href="#Blind-SQLite" class="headerlink" title="Blind (SQLite)"></a>Blind (SQLite)</h2><p>思路一样,没什么特别的地方</p><h2 id="Blind-WS-x2F-SOAP"><a href="#Blind-WS-x2F-SOAP" class="headerlink" title="Blind (WS&#x2F;SOAP)"></a>Blind (WS&#x2F;SOAP)</h2><p>思路一样,没什么特别的地方</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
    <tags>
      
      <tag>bwapp</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何利用hexo与GitHub Pages创建自己的博客网站</title>
    <link href="/2019/05/29/How-to-build-hexo/"/>
    <url>/2019/05/29/How-to-build-hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是hexo，GitHub-Pages又是什么？"><a href="#什么是hexo，GitHub-Pages又是什么？" class="headerlink" title="什么是hexo，GitHub Pages又是什么？"></a>什么是hexo，GitHub Pages又是什么？</h1><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a href="https://pages.github.com/">GitHub Pages</a> 是GitHub为开发者提供的一种静态站点托管服务，旨在直接从GitHub存储库托管您的个人，组织或项目页面。<br>GitHub Pages可以与各种博客框架配合搭建个人博客网站，本文主要介绍hexo这种框架与GitHub Pages的配合使用。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>安装Node.js</li><li>安装Git</li><li>GitHub账号</li><li>可联网的环境</li><li>可用域名(非必选)</li></ul><h1 id="本地部署hexo"><a href="#本地部署hexo" class="headerlink" title="本地部署hexo"></a>本地部署hexo</h1><h2 id="安装Node-js与Git"><a href="#安装Node-js与Git" class="headerlink" title="安装Node.js与Git"></a>安装Node.js与Git</h2><p>我这里安装使用的是PPA源安装，若有需要也可以使用nvm等其他方式安装，网上教程很多，就不赘述了。</p><pre><code class="hljs">sudo apt-get update  sudo apt-get install npm  sudo apt-get install nodejs  sudo apt-get install git  </code></pre><h2 id="安装hexo与next主题"><a href="#安装hexo与next主题" class="headerlink" title="安装hexo与next主题"></a>安装hexo与next主题</h2><pre><code class="hljs">$ npm install -g hexo-cli//创建文件夹$ mkdir [filename]//进入新建的hexo文件夹$ cd [filename]//初始化$ hexo init    //安装git部署插件$ npm install hexo-deployer-git --save//配置git身份信息$ git config --global user.name &quot;[yourname]&quot;$ git config --global user.email &quot;[youremail]&quot;$ git clone https://github.com/iissnan/hexo-theme-next.git themes/next</code></pre><p>安装好后打开hexo文件夹的_config.yml文件，找到theme:landscape，改为next，其他注释按需修改。<br>在本地查看部署效果：</p><pre><code class="hljs">$ hexo g$ hexo s</code></pre><p>访问<a href="http://localhost:4000/">http://localhost:4000/</a></p><h1 id="关联GitHub-Pages"><a href="#关联GitHub-Pages" class="headerlink" title="关联GitHub Pages"></a>关联GitHub Pages</h1><h2 id="创建个人的GitHub-Pages"><a href="#创建个人的GitHub-Pages" class="headerlink" title="创建个人的GitHub Pages"></a>创建个人的GitHub Pages</h2><p>如果没有GitHub账号，点击<a href="https://github.com/">GitHub</a>使用邮箱注册，然后新建仓库，格式应该为username .github.io，username是你的GitHub用户名，这里的格式不能错。<a href="https://pages.github.com/">详见</a></p><h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><p>之前只是本地部署，接下来我们需要将本地项目推送到刚刚创建的GitHub仓库中。<br>首先编辑站点文件夹下的_config.yml文件，找到deploy这一项，修改为如下格式：</p><pre><code class="hljs">deploy:  type: git  repository: git@github.com:wsr3005/wsr3005.github.io.git  branch: master</code></pre><p>只需输入</p><pre><code class="hljs">hexo d</code></pre><p>即可完成推送，此时在地址栏输入***.github.io，发现博客上线。</p><h2 id="绑定域名-可选"><a href="#绑定域名-可选" class="headerlink" title="绑定域名(可选)"></a>绑定域名(可选)</h2><ul><li>本地hexo的source文件夹下创建CNAME，其中输入你的域名</li><li>域名添加解析</li><li>GitHub仓库设置中将Custom domain设置为你的域名</li><li>本地推送修改到仓库</li></ul><p>未完待续</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
